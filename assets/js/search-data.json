{
  
    
        "post0": {
            "title": "Feature Selection Part 2",
            "content": "Feature selection part 2: A critique to feature importance . In part 1, I showed some of the dangers of using univariate selection methods. In part 2 I want to focus on the pitfalls of feature importance in random forests and gradient boosting methods. . I’ll write about it in the feature selection chapter as feature importances can be used to select features, as in Sklearn SelectFromModel. . In order to select features using feature importances, one can: . Train a model that has allows to compute feature importances. | Retrain the model with only the most important features. | . In my experience, when retraining with only the most important features, the model usually degrades a little (this might not always happen). . The main issue regarding selecting features using feature importance is that, if a feature is highly correlated with others, its importance will be lower than if this doesn’t happen. . As a rule of thumb, I’d say check that your features are not very correlated if you want to assess them using feature importance. . Experiment set-up . In order to show the deficiencies of selecting features using feature importance, we’ll use a rather ill-defined example. In this example, x1, x2, x3 and x4 are independent variables and the dependent variable is . y = x1 + (x2 + x3 + x4) / 2 + noise . When training a random forest, x1 should appear as the most important variable. If the feature selection method had to keep only one feature, x1 should be the one to select. . To see an example where feature importance might mislead you, we’ve created some borthers to x1. These brothers are variables that are very correlated to x1 and will be used to model y as well. These brothers are what cause the importance of x1 to be diminished. . library(&quot;dplyr&quot;) library(&quot;randomForest&quot;) library(&quot;glmnet&quot;) library(&quot;yardstick&quot;) set.seed(42) len &lt;- 5000 x1 &lt;- rnorm(len) x2 &lt;- rnorm(len) x3 &lt;- rnorm(len) x4 &lt;- rnorm(len) # The outcome is created without the brothers y &lt;- x1 + 0.5 * x2 + 0.5 * x3 + 0.5 * x4 + rnorm(len) x11 &lt;- 0.95 * x1 + 0.05 * rnorm(len) x12 &lt;- 0.95 * x1 + 0.05 * rnorm(len) x13 &lt;- 0.95 * x1 + 0.05 * rnorm(len) x14 &lt;- 0.95 * x1 + 0.05 * rnorm(len) x15 &lt;- 0.95 * x1 + 0.05 * rnorm(len) x16 &lt;- 0.95 * x1 + 0.05 * rnorm(len) x17 &lt;- 0.95 * x1 + 0.05 * rnorm(len) x18 &lt;- 0.95 * x1 + 0.05 * rnorm(len) . The table for the model is created, with x1 to x4, as well as x1’s brothers. . model_tbl &lt;- tibble( y = y, x1 = x1, x2 = x2, x3 = x3, x4 = x4, x11 = x11, x12 = x12, x13 = x13, x14 = x14, x15 = x15, x16 = x16, x17 = x17, x18 = x18 ) X &lt;- as.matrix(select(model_tbl, -y)) . Random forest importance . We’ll train a random forest model (when training this model, it automatically computes feature importance) . # Random forest importance rf &lt;- randomForest(X, y, importance = T) . And we show the importance of the features . varImpPlot(rf, type = 1) . . This shows the shortcomings of feature importance: x1 doesn’t appear as the most important feature. If we were to select three variables, we would select x2, x3 and x4, and this would of course degrade the model performance. . And if you think about it, it makes sense. In this random forest, to model the x1 contribution, some splits are done with x1, some with her brothers. For this reason, if x1 gets broken, the impact is not as big as if x2 breaks. . Lasso selection . On the other hand, lasso kind of makes it (recall that cv.glmnet default is lasso): . # Train lasso lasso &lt;- cv.glmnet(X, y) # Kind of makes it coef(lasso, s = &quot;lambda.min&quot;) . ## 13 x 1 sparse Matrix of class &quot;dgCMatrix&quot; ## 1 ## (Intercept) 0.01334871 ## x1 0.90829549 ## x2 0.49467345 ## x3 0.49902516 ## x4 0.48559226 ## x11 0.01570838 ## x12 . ## x13 . ## x14 . ## x15 . ## x16 0.02241166 ## x17 0.06331782 ## x18 . . It selects some of the x1 brothers, but with really small coefficients. If we regularize a bit more, they’ll probably vanish. . In fact, the next figure shows that the last feature to be vanished is x1, which didn’t happen in the random forest: . # x1 is the last one to go plotmo::plot_glmnet(lasso$glmnet.fit) . .",
            "url": "https://david26694.github.io/david-masip-blog/2020/05/16/feature-selection-part-2.html",
            "relUrl": "/2020/05/16/feature-selection-part-2.html",
            "date": " • May 16, 2020"
        }
        
    
  
    
        ,"post1": {
            "title": "Feature Selection Part 1",
            "content": "Feature selection part 1: A critique to univariate methods . The purpose of this post is to show the weaknesses of univariate feature selection methods. This methods usually go in the following way: . Compute a correlation metric for every feature with the target (this metric might be correlation or mutual information, among others) | Select the features that score the best regarding this metric | . A possible implementation is SelectKBest in sklearn. . If you’re an univariate method lover and have a different perspective, don’t hesitate to contact me. . Experiment set-up . Let’s prepare an experiment to see the deficiencies of these methods. We generate two variables x1 and x2 and a target variable y that is x1 + 0.1 * x2 + noise. So, the variable y is very similar to x1, but has some x2 as well. Then we create two variables x1a and x2a, that are noisy versions of x1 and x2. . Although the data is artifical, I believe this occurs in real life. When performing feature engineering, we might end up with pretty good features that are correlated, and also have not so good features. . library(dplyr) library(glmnet) library(yardstick) set.seed(42) len &lt;- 20000 x1 &lt;- rnorm(len) x2 &lt;- rnorm(len) # All the rnorm(len) that appear from now on are to simulate noise y &lt;- x1 + 0.1 * x2 + 0.05 * rnorm(len) x1a &lt;- 0.8 * x1 + 0.2 * rnorm(len) x2a &lt;- 0.8 * x2 + 0.2 * rnorm(len) . After this, we split the data in train and test sets to estimate errors. We also transform the data to matrix representation, as we’re going to use glmnet package that uses matrices to fit models. . model_tbl &lt;- tibble( y = y, x1 = x1, x2 = x2, x1a = x1a, x2a = x2a ) # Split train and test - X &lt;- as.matrix(select(model_tbl, -y)) X_train &lt;- X[1:(len/2),] y_train &lt;- y[1:(len/2)] X_test &lt;- X[(len/2 + 1):len,] y_test &lt;- y[(len/2 + 1):len] . Univariate-method approach . The univariate method approach that we follow here consists in keeping the most correlated variables with the target. For this reason, we compute the correlation for each variable: . cor(X_train, y_train) . ## [,1] ## x1 0.99390574 ## x2 0.10012730 ## x1a 0.96482998 ## x2a 0.09786507 . We’ll keep only the first and third variables, as they are the most correlated with the target. We’ll train a ridge model using glmnet and cross-validation to select the optimal hyperparameters: . X_train_cor &lt;- X_train[, c(1, 3)] X_test_cor &lt;- X_test[, c(1, 3)] ridge &lt;- cv.glmnet(X_train_cor, y_train, alpha = 0) y_pred_cor &lt;- as.vector(predict(ridge, X_test_cor, s = &quot;lambda.min&quot;)) . Multivariate methods: the Lasso . The Lasso can be thought of as a multivariate feature selection method, as it uses all the features at the same time to select a subset. Here we are applying a Lasso because cv.glmnet does Lasso (alpha = 1) by default. . lasso &lt;- cv.glmnet(X_train, y_train) y_pred_lasso &lt;- as.vector(predict(lasso, X_test, s = &quot;lambda.min&quot;)) . Results . Coefficient comparison . By construction, the coefficients should be 1 for x1 and 0.1 for x2. In the ridge case (recall that we’ve applied univariate selection using correlation), this won’t happen as we’ve deleted x2 because the correlation with the target was too low. . coef(ridge, s = &quot;lambda.min&quot;) . ## 3 x 1 sparse Matrix of class &quot;dgCMatrix&quot; ## 1 ## (Intercept) -0.000664586 ## x1 0.589067554 ## x1a 0.439495206 . In fact, what we have is a mixture of x1 and x1a. . On the other hand, the Lasso sets the coefficients of x1a and x2a to 0 (doesn’t select those variables), and estimates the coefficents of x1 and x2 pretty well: . coef(lasso, s = &quot;lambda.min&quot;) . ## 5 x 1 sparse Matrix of class &quot;dgCMatrix&quot; ## 1 ## (Intercept) -0.0004744455 ## x1 0.9954934728 ## x2 0.0941690869 ## x1a . ## x2a . . Test set results . If you care more about model performance and not that much of proper estimation of the parameters, I also have an argument for you. The Lasso predictions are way better than the correlation method predictions: . rmse_vec(y_pred_lasso, y_test) . ## [1] 0.05027135 . rmse_vec(y_pred_cor, y_test) . ## [1] 0.1563891 . We can even interpret it: . The lasso error is around 0.05 which is the “noise size” used to generate y. | The error of the univariate method is 0.15, which is 0.05 (noise size used to generate y) plus 0.10 (error we are commiting by not considering x2). | .",
            "url": "https://david26694.github.io/david-masip-blog/2020/05/09/feature-selection-part-1.html",
            "relUrl": "/2020/05/09/feature-selection-part-1.html",
            "date": " • May 9, 2020"
        }
        
    
  
    
        ,"post2": {
            "title": "Art Of Readable Code",
            "content": "The Art of Readable Code . Some time ago I read The art of Readable Code. I recommend this read for every person starting a career where they have to code on a daily basis. Here’s a summary of the ideas I liked the most. . Better code . 1. Code should by easy to understand . Key ideas: Code should be easy to understand. | Code should be written to minimize the time it would take for someone else to understand it. | Smaller isn’t always better. | . | . I think defining a metric and push your efforts to improve it simplifies your life. In this case, the metric is the time that it would take for someone to understand your code. . 2. Packing information into names . Pack information into names. | Choose specific words: get is not very specific. | Avoid generic names like tmp, aux, retval. | Variable names are tiny comments. | Abbreviations: would a new teammate understand what the name means? | Summary: Use specific words. | Avoid generic names. | Attach important details. | Use capitalization, underscores and so on in a meaningful way. | . | . This chapter allowed me to give more meaningful names to variables and functions. When I define a function called get_data or a variable called data there’s something in my head telling me I should improve it. I never call a variable var anymore. . 3. Names that can’t be misconstructed . Actively scrutinize names by asking: what other meanings can be interpreted? | Summary: Play devil’s advocate with names. | When naming booleans, use words like is to make it clear. | . | . I like the idea of putting yourself into a new teammate position and see how could they fuck up due to your bad naming. . 4. Aesthetics . Use consistent layout, with patterns the reader can get used to. | Make similar code look similar. | Group related lines of code into blocks. | Aligning parts of the code into “columns” can make code easy to skim through. | If code mentions A, B, and C in one place, don’t say B, C, and A in another. Pick a meaningful order and stick with it. | Use empty lines to break apart large blocks into logical “paragraphs.” | . More aestethic code is easier to read. . 5. Knowing what to comment . The purpose of commenting is to help the reader know as much as the writer did. | Don’t comment just for the sake of commenting. | Don’t comment bad names. Fix the names instead. | Include director comments to understand the general idea. Imagine someone joins the team, what would you explain to her? These things have to be commented. | Comment your constants. | Put in the reader’s shoes. | Advertise likely pitfalls: what is surprising about the code? how it might by misused? | Summarise blocks of code so the reader doesn’t get lost in details. | . I used to write comments just to write comments. If a function is called: . get_client_ids . Please don’t add the comment . # This function gets the clients ids . 6. Making comments precise and compact . Comments should have high info-to-space ratio | Illustrate comments with carefully chosen input/output examples. | Add high-level idea of code instead of obvious details. | . Providing examples is key if you want someone to use your code. I think R does this pretty well for package developers. . Simplifying loops and logic . 7. Simplifying loops and logic . Key idea: make control flow as natural as possible. | Prefered orders in if(a == b) vs if(a != b): Prefer positive case first. | Prefer simpler case first. | Prefer more interesting case first (there can be conflicts with the above). | . | Return early from functions if possible. | Minimize nesting. | . I think it’s easier to reason about positive cases than negative (negating adds a complexity layer). . 8. Breaking down giant expressions . Key idea: break down giant expressions into more digestible pieces. | Explaining variables: use extra variables that capture subexpressions. | Beware of “clever” chunks of code: they’re often harder to read. | . This is something we’ve all been told. Split your code into functions, etc. I particularly like the warning about clever chunks of code. If you need to think very hard to code it, it’s probably going to be hard to understand. . 9. Variables and readability . Sloppy use of variables issues: The more variables, the harder to keep track of them: Eliminate variables that jut get in the way. | The bigger a variable scope, the longer you have to keep track: Make your variable visible by as few lines of code as possible. | The more often it changes, the harder it is to keep track of its value: Prefer write-once variables. | . | . I particularly like the fact that variables shouldn’t be updated a lot and that they should be in the shortest subset of code possible. . Reorganizing your code . 10. Extracting unrelated subproblems . Method to extract unrelated subproblems: For each function/block, obtain the high-level goal of the code. | For each line of code, ask if it solves the high-level goal or an unrelated subproblem. | If enough lines solve an unrelated subproblem, extract the code in a separate function. | . | Create general-purpose code: separate generic code from project-specific code. | . 11. One task at a time . Key idea: Code should be organized so that it’s doing only one task at a time. | List all tasks code is doing. Some of them might easily become functions or classes. Others become paragraphs in a funciton. | . 12. Turning thoughts into code . Process that can help you code clearly: Describe code as you would to a colleague. | Pay attention to key words. | Write code to match description. | . | The method is also valid for debugging (as describing the problem). | . 13. Writing less code . Eliminate nonessential features from product. | Rethink requirements to solve the easiest version of the problem that still gets the job done. | Stay familiar with standard libraries by reading their APIs. | .",
            "url": "https://david26694.github.io/david-masip-blog/2020/05/02/art-of-readable-code.html",
            "relUrl": "/2020/05/02/art-of-readable-code.html",
            "date": " • May 2, 2020"
        }
        
    
  
    
        ,"post3": {
            "title": "Fastpages Notebook Blog Post",
            "content": "About . This notebook is a demonstration of some of capabilities of fastpages with notebooks. . With fastpages you can save your jupyter notebooks into the _notebooks folder at the root of your repository, and they will be automatically be converted to Jekyll compliant blog posts! . Front Matter . The first cell in your Jupyter Notebook or markdown blog post contains front matter. Front matter is metadata that can turn on/off options in your Notebook. It is formatted like this: . # &quot;My Title&quot; &gt; &quot;Awesome summary&quot; - toc:true- branch: master- badges: true- comments: true - author: Hamel Husain &amp; Jeremy Howard - categories: [fastpages, jupyter] . Setting toc: true will automatically generate a table of contents | Setting badges: true will automatically include GitHub and Google Colab links to your notebook. | Setting comments: true will enable commenting on your blog post, powered by utterances. | . The title and description need to be enclosed in double quotes only if they include special characters such as a colon. More details and options for front matter can be viewed on the front matter section of the README. . Markdown Shortcuts . A #hide comment at the top of any code cell will hide both the input and output of that cell in your blog post. . A #hide_input comment at the top of any code cell will only hide the input of that cell. . The comment #hide_input was used to hide the code that produced this. . put a #collapse-hide flag at the top of any cell if you want to hide that cell by default, but give the reader the option to show it: . #collapse-hide import pandas as pd import altair as alt . . put a #collapse-show flag at the top of any cell if you want to show that cell by default, but give the reader the option to hide it: . #collapse-show cars = &#39;https://vega.github.io/vega-datasets/data/cars.json&#39; movies = &#39;https://vega.github.io/vega-datasets/data/movies.json&#39; sp500 = &#39;https://vega.github.io/vega-datasets/data/sp500.csv&#39; stocks = &#39;https://vega.github.io/vega-datasets/data/stocks.csv&#39; flights = &#39;https://vega.github.io/vega-datasets/data/flights-5k.json&#39; . . Interactive Charts With Altair . Charts made with Altair remain interactive. Example charts taken from this repo, specifically this notebook. . Example 1: DropDown . # single-value selection over [Major_Genre, MPAA_Rating] pairs # use specific hard-wired values as the initial selected values selection = alt.selection_single( name=&#39;Select&#39;, fields=[&#39;Major_Genre&#39;, &#39;MPAA_Rating&#39;], init={&#39;Major_Genre&#39;: &#39;Drama&#39;, &#39;MPAA_Rating&#39;: &#39;R&#39;}, bind={&#39;Major_Genre&#39;: alt.binding_select(options=genres), &#39;MPAA_Rating&#39;: alt.binding_radio(options=mpaa)} ) # scatter plot, modify opacity based on selection alt.Chart(movies).mark_circle().add_selection( selection ).encode( x=&#39;Rotten_Tomatoes_Rating:Q&#39;, y=&#39;IMDB_Rating:Q&#39;, tooltip=&#39;Title:N&#39;, opacity=alt.condition(selection, alt.value(0.75), alt.value(0.05)) ) . Example 2: Tooltips . alt.Chart(movies).mark_circle().add_selection( alt.selection_interval(bind=&#39;scales&#39;, encodings=[&#39;x&#39;]) ).encode( x=&#39;Rotten_Tomatoes_Rating:Q&#39;, y=alt.Y(&#39;IMDB_Rating:Q&#39;, axis=alt.Axis(minExtent=30)), # use min extent to stabilize axis title placement tooltip=[&#39;Title:N&#39;, &#39;Release_Date:N&#39;, &#39;IMDB_Rating:Q&#39;, &#39;Rotten_Tomatoes_Rating:Q&#39;] ).properties( width=600, height=400 ) . Example 3: More Tooltips . # select a point for which to provide details-on-demand label = alt.selection_single( encodings=[&#39;x&#39;], # limit selection to x-axis value on=&#39;mouseover&#39;, # select on mouseover events nearest=True, # select data point nearest the cursor empty=&#39;none&#39; # empty selection includes no data points ) # define our base line chart of stock prices base = alt.Chart().mark_line().encode( alt.X(&#39;date:T&#39;), alt.Y(&#39;price:Q&#39;, scale=alt.Scale(type=&#39;log&#39;)), alt.Color(&#39;symbol:N&#39;) ) alt.layer( base, # base line chart # add a rule mark to serve as a guide line alt.Chart().mark_rule(color=&#39;#aaa&#39;).encode( x=&#39;date:T&#39; ).transform_filter(label), # add circle marks for selected time points, hide unselected points base.mark_circle().encode( opacity=alt.condition(label, alt.value(1), alt.value(0)) ).add_selection(label), # add white stroked text to provide a legible background for labels base.mark_text(align=&#39;left&#39;, dx=5, dy=-5, stroke=&#39;white&#39;, strokeWidth=2).encode( text=&#39;price:Q&#39; ).transform_filter(label), # add text labels for stock prices base.mark_text(align=&#39;left&#39;, dx=5, dy=-5).encode( text=&#39;price:Q&#39; ).transform_filter(label), data=stocks ).properties( width=700, height=400 ) . Data Tables . You can display tables per the usual way in your blog: . movies = &#39;https://vega.github.io/vega-datasets/data/movies.json&#39; df = pd.read_json(movies) # display table with pandas df[[&#39;Title&#39;, &#39;Worldwide_Gross&#39;, &#39;Production_Budget&#39;, &#39;Distributor&#39;, &#39;MPAA_Rating&#39;, &#39;IMDB_Rating&#39;, &#39;Rotten_Tomatoes_Rating&#39;]].head() . Title Worldwide_Gross Production_Budget Distributor MPAA_Rating IMDB_Rating Rotten_Tomatoes_Rating . 0 The Land Girls | 146083.0 | 8000000.0 | Gramercy | R | 6.1 | NaN | . 1 First Love, Last Rites | 10876.0 | 300000.0 | Strand | R | 6.9 | NaN | . 2 I Married a Strange Person | 203134.0 | 250000.0 | Lionsgate | None | 6.8 | NaN | . 3 Let&#39;s Talk About Sex | 373615.0 | 300000.0 | Fine Line | None | NaN | 13.0 | . 4 Slam | 1087521.0 | 1000000.0 | Trimark | R | 3.4 | 62.0 | . Images . Local Images . You can reference local images and they will be copied and rendered on your blog automatically. You can include these with the following markdown syntax: . ![](my_icons/fastai_logo.png) . . Remote Images . Remote images can be included with the following markdown syntax: . ![](https://image.flaticon.com/icons/svg/36/36686.svg) . . Animated Gifs . Animated Gifs work, too! . ![](https://upload.wikimedia.org/wikipedia/commons/7/71/ChessPawnSpecialMoves.gif) . . Captions . You can include captions with markdown images like this: . ![](https://www.fast.ai/images/fastai_paper/show_batch.png &quot;Credit: https://www.fast.ai/2020/02/13/fastai-A-Layered-API-for-Deep-Learning/&quot;) . . Other Elements . GitHub Flavored Emojis . Typing I give this post two :+1:! will render this: . I give this post two :+1:! . Tweetcards . Typing &gt; twitter: https://twitter.com/jakevdp/status/1204765621767901185?s=20 will render this: Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 . Youtube Videos . Typing &gt; youtube: https://youtu.be/XfoYk_Z5AkI will render this: . Boxes / Callouts . Typing &gt; Warning: There will be no second warning! will render this: . Warning: There will be no second warning! . Typing &gt; Important: Pay attention! It&#39;s important. will render this: . Important: Pay attention! It&#8217;s important. . Typing &gt; Tip: This is my tip. will render this: . Tip: This is my tip. . Typing &gt; Note: Take note of this. will render this: . Note: Take note of this. . Typing &gt; Note: A doc link to [an example website: fast.ai](https://www.fast.ai/) should also work fine. will render in the docs: . Note: A doc link to an example website: fast.ai should also work fine. . Footnotes . You can have footnotes in notebooks, however the syntax is different compared to markdown documents. This guide provides more detail about this syntax, which looks like this: . For example, here is a footnote {% fn 1 %}. And another {% fn 2 %} {{ &#39;This is the footnote.&#39; | fndetail: 1 }} {{ &#39;This is the other footnote. You can even have a [link](www.github.com)!&#39; | fndetail: 2 }} . For example, here is a footnote 1. . And another 2 . 1. This is the footnote.↩ . 2. This is the other footnote. You can even have a link!↩ .",
            "url": "https://david26694.github.io/david-masip-blog/jupyter/2020/02/20/test.html",
            "relUrl": "/jupyter/2020/02/20/test.html",
            "date": " • Feb 20, 2020"
        }
        
    
  
    
        ,"post4": {
            "title": "An Example Markdown Post",
            "content": "Example Markdown Post . Basic setup . Jekyll requires blog post files to be named according to the following format: . YEAR-MONTH-DAY-filename.md . Where YEAR is a four-digit number, MONTH and DAY are both two-digit numbers, and filename is whatever file name you choose, to remind yourself what this post is about. .md is the file extension for markdown files. . The first line of the file should start with a single hash character, then a space, then your title. This is how you create a “level 1 heading” in markdown. Then you can create level 2, 3, etc headings as you wish but repeating the hash character, such as you see in the line ## File names above. . Basic formatting . You can use italics, bold, code font text, and create links. Here’s a footnote 1. Here’s a horizontal rule: . . Lists . Here’s a list: . item 1 | item 2 | . And a numbered list: . item 1 | item 2 | Boxes and stuff . This is a quotation . . You can include alert boxes …and… . . You can include info boxes Images . . Code . You can format text and code per usual . General preformatted text: . # Do a thing do_thing() . Python code and output: . # Prints &#39;2&#39; print(1+1) . 2 . Formatting text as shell commands: . echo &quot;hello world&quot; ./some_script.sh --option &quot;value&quot; wget https://example.com/cat_photo1.png . Formatting text as YAML: . key: value - another_key: &quot;another value&quot; . Tables . Column 1 Column 2 . A thing | Another thing | . Tweetcards . Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 Footnotes . This is the footnote. &#8617; . |",
            "url": "https://david26694.github.io/david-masip-blog/markdown/2020/01/14/test-markdown-post.html",
            "relUrl": "/markdown/2020/01/14/test-markdown-post.html",
            "date": " • Jan 14, 2020"
        }
        
    
  

  
  

  
      ,"page1": {
          "title": "About Me",
          "content": "This is where you put the contents of your About page. Like all your pages, it’s in Markdown format. . This website is powered by fastpages 1. . a blogging platform that natively supports Jupyter notebooks in addition to other formats. &#8617; . |",
          "url": "https://david26694.github.io/david-masip-blog/about/",
          "relUrl": "/about/",
          "date": ""
      }
      
  

  

  
  

  

  
  

  

  
  

  
  

  
  

  
      ,"page10": {
          "title": "",
          "content": "Sitemap: {{ “sitemap.xml” | absolute_url }} | .",
          "url": "https://david26694.github.io/david-masip-blog/robots.txt",
          "relUrl": "/robots.txt",
          "date": ""
      }
      
  

}