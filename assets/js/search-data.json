{
  
    
        "post0": {
            "title": "slider package",
            "content": "slider is an R package that allows to perform sliding window calculations. In this post we’re going to see how slider can be used to perform feature engineering for sales forecasting problems. . Problem formulation . Your are working on a demand prediction problem. You have sales data that has the following structure: . ## shop product date units_sold ## 1 A iogurt 2020-02-01 11 ## 2 A iogurt 2020-02-02 15 ## 3 A iogurt 2020-02-03 14 ## 4 B iogurt 2020-02-01 25 ## 5 B iogurt 2020-02-02 33 ## 6 B iogurt 2020-02-03 33 . And you want to predict, for each shop and each product, the units that will be sold during the following day. . To do so, you’ll create features like: . How much was the product sold on average during last week in that shop. | How much was the product sold on average during last week in all shops. | How much was the shop selling on average during last week. | Similar features but using last month data, instead of last week. Or maybe even using the over-all sales history that we have. | Perhaps we want compute averages by using the mean, but maybe we want the median, maximum and minimum units sold during the week. | . I think slider is one of the simplest ways of doing this. . Introduction to slider . Slider has a main function, slide, and variations of it. According to the documentation, . slide() iterates through .x using a sliding window, applying .f to each sub-window of .x. . The sub-window of .x is highly customizable. The parameters to customize the sub-window are mainly .before, .after, .step and .complete. . Let’s see it with some examples. Compute the over-all sales in shop A until today (this is not a feature we want to train our model on, but something to see the behaviour of slide): . # Cumulative sold items until today sales_tbl %&gt;% filter(shop == &#39;A&#39;) %&gt;% mutate( # (slightly technical warning) We&#39;re going to be using # slide_vec instead of slide, they&#39;re basically the same, # but slide_vec returns a vector, whereas slide returns a list sum_sold_wrong = slide_vec(.x = units_sold, .f = sum, .before = Inf) ) . ## shop product date units_sold sum_sold_wrong ## 1 A iogurt 2020-02-01 11 11 ## 2 A iogurt 2020-02-02 15 26 ## 3 A iogurt 2020-02-03 14 40 . The .before parameter indicates how many days do we go back to aggregate the sold units. If we set it to Inf, it computes the units sold until today. . The issue is that this sum_sold_wrong has the units that have been sold including today. If we want to exclude today’s data, which makes sense as we want to predict without today’s information, slider has this nice trick (setting .after = -1): . # Here we are excluding today! sales_tbl %&gt;% filter(shop == &#39;A&#39;) %&gt;% mutate( sum_sold_right = slide_vec(.x = units_sold, .f = sum, .before = Inf, .after = -1) ) . ## shop product date units_sold sum_sold_right ## 1 A iogurt 2020-02-01 11 0 ## 2 A iogurt 2020-02-02 15 11 ## 3 A iogurt 2020-02-03 14 26 . Setting .after to -1 is kind of dark but it will be used a lot when doing forecasting using slider. It is important to use a negative .after since we don’t want to leak information from the future into our pipeline. . Feature engineering with slider . Let’s say we want to compute features at shop level: . Mean of units sold during the last week for each shop. | Mean of units sold during the last month for each shop. | Mean of units sold over-all for each shop. | Max of units sold during the last week for each shop. | Max of units sold during the last month for each shop. | Max of units sold over-all for each shop. | . What I like about slider is that explaining the features takes more time than coding them: . sales_tbl &lt;- sales_tbl %&gt;% group_by(shop) %&gt;% # Shop-level features mutate( # Mean of units sold during the last week mean_sold_shop_week = slide_vec(.x = units_sold, .f = mean, .before = 7, .after = -1), # Mean of units sold during the last month mean_sold_shop_month = slide_vec(.x = units_sold, .f = mean, .before = 30, .after = -1), # Mean of units sold over-all mean_sold_shop = slide_vec(.x = units_sold, .f = mean, .before = Inf, .after = -1), # Max of units sold during the last week max_sold_shop_week = slide_vec(.x = units_sold, .f = max, .before = 7, .after = -1), # Max of units sold during the last month max_sold_shop_month = slide_vec(.x = units_sold, .f = max, .before = 30, .after = -1), # Max of units sold over-all max_sold_shop = slide_vec(.x = units_sold, .f = max, .before = Inf, .after = -1) ) . If we want to do the same at product level, we only have to change the grouping variable (and variable names): . sales_tbl &lt;- sales_tbl %&gt;% group_by(product) %&gt;% # Product-level features mutate( # Mean of units sold during the last week mean_sold_product_week = slide_vec(.x = units_sold, .f = mean, .before = 7, .after = -1), # Mean of units sold during the last month mean_sold_product_month = slide_vec(.x = units_sold, .f = mean, .before = 30, .after = -1), # Mean of units sold over-all mean_sold_product = slide_vec(.x = units_sold, .f = mean, .before = Inf, .after = -1), # Max of units sold during the last week max_sold_product_week = slide_vec(.x = units_sold, .f = max, .before = 7, .after = -1), # Max of units sold during the last month max_sold_product_month = slide_vec(.x = units_sold, .f = max, .before = 30, .after = -1), # Max of units sold over-all max_sold_product = slide_vec(.x = units_sold, .f = max, .before = Inf, .after = -1) ) . Same if we want features at shop and product level: . sales_tbl &lt;- sales_tbl %&gt;% group_by(shop, product) %&gt;% # Product-level features mutate( # Mean of units sold during the last week mean_sold_sh_product_week = slide_vec(.x = units_sold, .f = mean, .before = 7, .after = -1), # Mean of units sold during the last month mean_sold_sh_product_month = slide_vec(.x = units_sold, .f = mean, .before = 30, .after = -1), # Mean of units sold over-all mean_sold_sh_product = slide_vec(.x = units_sold, .f = mean, .before = Inf, .after = -1), # Max of units sold during the last week max_sold_sh_product_week = slide_vec(.x = units_sold, .f = max, .before = 7, .after = -1), # Max of units sold during the last month max_sold_sh_product_month = slide_vec(.x = units_sold, .f = max, .before = 30, .after = -1), # Max of units sold over-all max_sold_sh_product = slide_vec(.x = units_sold, .f = max, .before = Inf, .after = -1) ) . If we want to take into consideration the day of week, we can use the .step parameter. The following call to slide_vec computes the mean of units sold of the last 4 days of that weekday. . sales_tbl &lt;- sales_tbl %&gt;% ungroup() %&gt;% mutate( day_of_week_effect = slide_vec(.x = units_sold, .f = mean, .before = 4, .step = 7, .after = -1), ) . With very few lines of code we’ve managed to build features that very predictive of our outcome. Moreover, we are not leaking information from the future. A supervised learning model could be trained on these features and we can have very quickly a very decent baseline to start iterating on. . Why slider? . For some of this quantities, the use of slider seems kind of an over-kill. For instance, the over-all mean of units sold in a given shop can be done in two different ways: . # Slider way sales_tbl &lt;- sales_tbl %&gt;% group_by(shop) %&gt;% mutate( mean_sold_shop = slide_vec(.x = units_sold, .f = mean, .before = Inf, .after = -1) ) # Simple way sales_tbl &lt;- sales_tbl %&gt;% group_by(shop) %&gt;% mutate( mean_sold_shop = mean(units_sold) ) . Why would I rather use the slider way? The reason is that the simple way leaks information from the future. That is, it uses the target of a row to create a feature, and then we are going to use that feature to predict the target. We might end up over-trusting the mean_sold_shop feature. This might have two consequences: . If we do it right, by only using the train set to compute mean_sold_shop the model might degrade in the test set. This is not ideal, but we can live with it. | If we do it wrong, by using the test set to compute mean_sold_shop the model will degrade in production, which is a bigger trouble. | . With slider, you don’t have to worry about none of the above since you are only using information from the past. .",
            "url": "https://david26694.github.io/david-masip-blog/r/feature-engineering/2020/05/30/slider.html",
            "relUrl": "/r/feature-engineering/2020/05/30/slider.html",
            "date": " • May 30, 2020"
        }
        
    
  
    
        ,"post1": {
            "title": "A bayesian trick for feature engineering",
            "content": "Problem formulation . You are building a model and, for the entity you want to infer, there is a history of binary events. For instance: . Finance case: If you want to predict if someone will repay a loan, you have a history of the loans that they paid late or not. | Marketing case: If you want to predict if someone will buy in an e-commerce, you have a history of times they clicked (or not clicked) in the ads that were sent via email. | Logistics case: If you want to estimate the delay in the delivery of a package from a courier, you have a history of times that the courier arrived late to the package pick-up. | . The naive method to deal with these event histories is to compute fractions regarding the past data. For the finance case, for instance, you’d compute the fraction of past loans what have been paid late. The higher this feature is, the more unlikely is the person to repay their loan. Everything looks right in here. . However, when estimating these fractions, we have to be careful about the statiscal mass. If a client (A) has only recieved an email and not opened it, the fraction of opened emails will be 0. This is very different from another client (B) who’s recieved 30 emails and not opened them. . Client A fraction of email clicking will be 0, but we have very low statistical mass, so we are underestimating its interest in buying. | Client B fraction of email clicking will be 0, but we are pretty sure the client is not very interested in the ads we send. | . In the loan case, if client C has got only 1 loan and paid it late, the fraction of late payments will be 1. If client D has got 10 loans and paid all of them late, they will also have this fraction to 1. . Client C fraction of late payments will be 1, but we are not very sure if client C is a late payer. | Client D fraction of late payments will be 1, and we are more sure that client D is a late payer. | . This feature might be a good predictor but it seems to perform badly when new clients join: they might have this feature very high or very low just by chance, and this might hurt the model performance in this population. . Bayesian statistics approach . A solution to this cold-start issue is to estimate fractions using a bayesian approach. Mathematically, the events can be modelled using a Bernoulli distribution of probability $p$, where $p$ depends on each client. . The simplest bayesian solution to estimating the parameter of a Bernoulli is the following (see this post): . Assume $p$ has a beta distribution. | Update the beta parameters using the data from that client. | Estimate $p$ as the mean of the posterior distribution. | . We use the beta distribution because it is the conjugate prior of the Bernoulli. One issue that we have is providing the parameters $ alpha$ and $ beta$ of the prior distribution. . If we don’t want to assume much about $p$, we can use Jeffreys prior. In the beta distribution case, this is achieved by setting $ alpha = beta = 1/2$. In this case, if the client has gone through $n$ events and $x$ of them have been successes ($n$ emails sent, $x$ of them opened), the bayesian fraction will be the following: . p^=x+0.5n+1 hat{p} = frac{x + 0.5}{n + 1}p^​=n+1x+0.5​ . On the other hand, without the bayesian trick we would do $ hat{p} = frac{x}{n}$. . If we know something about the distribution of $p$, we can assume more and choose $ alpha$ and $ beta$ such that the beta distribution represents our prior belief (I know this is a bit heuristic), here’s an app to explore the possible priors for the beta distribution. . Extras . This is not exclusive from estimating proportions, any feature that is an estimation of a parameter from a known distribution can be modelled in this way, but using another bayesian prior and update rule. | A particular case of this is target encoding, which can be done using maximum likelihood or in a bayesian way. | .",
            "url": "https://david26694.github.io/david-masip-blog/feature-engineering/bayesian-statistics/2020/05/23/bayesian-feature-engineering.html",
            "relUrl": "/feature-engineering/bayesian-statistics/2020/05/23/bayesian-feature-engineering.html",
            "date": " • May 23, 2020"
        }
        
    
  
    
        ,"post2": {
            "title": "Feature selection part 2",
            "content": "In part 1, I showed some of the dangers of using univariate selection methods. In part 2 I want to focus on the pitfalls of feature importance in random forests and gradient boosting methods. . I’ll write about it in the feature selection chapter as feature importances can be used to select features, as in Sklearn SelectFromModel. . In order to select features using feature importances, one can: . Train a model that has allows to compute feature importances. | Retrain the model with only the most important features. | . In my experience, when retraining with only the most important features, the model usually degrades a little. . The main issue regarding selecting features using feature importance is that, if a feature is highly correlated with others, its importance will be lower than if it isn’t correlated with any features. For this reason I advise to check that your features are not very correlated if you want to assess them using feature importance. . Experiment set-up . In order to show the issues of selecting features using feature importance, we’ll use a rather ill-defined example. In this example, x1, x2, x3 and x4 are independent variables and the dependent variable is . y ~ x1 + (x2 + x3 + x4) * 0.5 + noise . When training a random forest, x1 should appear as the most important variable. If the feature selection method had to keep only one feature, x1 should be the one to select. . To see an example where feature importance might mislead you, we’ve created some brothers to x1. They are variables that are very correlated to x1 and will be used to model y as well. These brothers are what cause the importance of x1 to be diminished. . library(&quot;dplyr&quot;) library(&quot;randomForest&quot;) library(&quot;glmnet&quot;) set.seed(42) len &lt;- 5000 x1 &lt;- rnorm(len) x2 &lt;- rnorm(len) x3 &lt;- rnorm(len) x4 &lt;- rnorm(len) # The outcome is created without the brothers y &lt;- x1 + 0.5 * x2 + 0.5 * x3 + 0.5 * x4 + rnorm(len) # x1i are x1&#39;s &quot;brothers&quot;: variables that are mainly x1 but with some noise x11 &lt;- 0.95 * x1 + 0.05 * rnorm(len) x12 &lt;- 0.95 * x1 + 0.05 * rnorm(len) x13 &lt;- 0.95 * x1 + 0.05 * rnorm(len) x14 &lt;- 0.95 * x1 + 0.05 * rnorm(len) x15 &lt;- 0.95 * x1 + 0.05 * rnorm(len) x16 &lt;- 0.95 * x1 + 0.05 * rnorm(len) x17 &lt;- 0.95 * x1 + 0.05 * rnorm(len) x18 &lt;- 0.95 * x1 + 0.05 * rnorm(len) . Then we create the feature matrix, with x1 to x4, as well as x1’s brothers. . model_tbl &lt;- tibble( y = y, x1 = x1, x2 = x2, x3 = x3, x4 = x4, x11 = x11, x12 = x12, x13 = x13, x14 = x14, x15 = x15, x16 = x16, x17 = x17, x18 = x18 ) X &lt;- as.matrix(select(model_tbl, -y)) . Random forest importance . A random forest model is trained (when training this model, it automatically computes feature importance). . rf &lt;- randomForest(X, y, importance = T) . And we show the importance of the features: . varImpPlot(rf, type = 1) . . This shows the shortcomings of feature importance: x1 doesn’t appear as the most important feature. If we were to select three variables, we would select x2, x3 and x4, and this would of course degrade the model performance. . Thinking about it, it makes sense. In this random forest, to model the x1 contribution, some splits are done with x1, some with her brothers. For this reason, if x1 gets broken, the impact is not as big as if x2 breaks. . Lasso selection . On the other hand, lasso kind of makes it (recall that cv.glmnet default is lasso): . # Train lasso lasso &lt;- cv.glmnet(X, y) # Kind of makes it coef(lasso, s = &quot;lambda.min&quot;) . ## 13 x 1 sparse Matrix of class &quot;dgCMatrix&quot; ## 1 ## (Intercept) 0.01334871 ## x1 0.90829549 ## x2 0.49467345 ## x3 0.49902516 ## x4 0.48559226 ## x11 0.01570838 ## x12 . ## x13 . ## x14 . ## x15 . ## x16 0.02241166 ## x17 0.06331782 ## x18 . . It selects some of the x1 brothers, but with really small coefficients. If we regularize a bit more, they’ll probably vanish. . In fact, the next figure shows that the last feature to be vanished is x1, which didn’t happen in the random forest: . # x1 is the last one to go plotmo::plot_glmnet(lasso$glmnet.fit) . . Of course Lasso selects the variables better in this case, as the model is generated linearly. A case where feature importance might shine more than the Lasso is when the dependent variable is a non-linear function of the features. . To sum up, be careful with feature importance when having highly correlated features. .",
            "url": "https://david26694.github.io/david-masip-blog/r/feature-selection/2020/05/16/feature-selection-part-2.html",
            "relUrl": "/r/feature-selection/2020/05/16/feature-selection-part-2.html",
            "date": " • May 16, 2020"
        }
        
    
  
    
        ,"post3": {
            "title": "Feature selection part 1",
            "content": "The purpose of this post is to show the weaknesses of univariate feature selection methods. This methods usually go in the following way: . Compute a correlation metric for every feature with the target (this metric might be correlation or mutual information, among others) | Select the features that score the best regarding this metric | . A possible implementation is SelectKBest in sklearn. . If you’re an univariate method lover and have a different perspective, don’t hesitate to contact me. . Experiment set-up . Let’s prepare an experiment to see the deficiencies of these methods. We generate two variables x1 and x2 and a target variable y that is x1 + 0.1 * x2 + noise. So, the variable y is very similar to x1, but has some x2 as well. Then we create two variables x1a and x2a, that are noisy versions of x1 and x2. . Although the data is artifical, I believe this occurs in real life. When performing feature engineering, we might end up with pretty good features that are correlated, and also have not so good features. . library(dplyr) library(glmnet) library(yardstick) set.seed(42) len &lt;- 20000 x1 &lt;- rnorm(len) x2 &lt;- rnorm(len) # All the rnorm(len) that appear from now on are to simulate noise y &lt;- x1 + 0.1 * x2 + 0.05 * rnorm(len) x1a &lt;- 0.8 * x1 + 0.2 * rnorm(len) x2a &lt;- 0.8 * x2 + 0.2 * rnorm(len) . After this, we split the data in train and test sets to estimate errors. We also transform the data to matrix representation, as we’re going to use glmnet package that uses matrices to fit models. . model_tbl &lt;- tibble( y = y, x1 = x1, x2 = x2, x1a = x1a, x2a = x2a ) # Split train and test - X &lt;- as.matrix(select(model_tbl, -y)) X_train &lt;- X[1:(len/2),] y_train &lt;- y[1:(len/2)] X_test &lt;- X[(len/2 + 1):len,] y_test &lt;- y[(len/2 + 1):len] . Univariate-method approach . The univariate method approach that we follow here consists in keeping the most correlated variables with the target. For this reason, we compute the correlation for each variable: . cor(X_train, y_train) . ## [,1] ## x1 0.99390574 ## x2 0.10012730 ## x1a 0.96482998 ## x2a 0.09786507 . We’ll keep only the first and third variables, as they are the most correlated with the target. We’ll train a ridge model using glmnet and cross-validation to select the optimal hyperparameters: . X_train_cor &lt;- X_train[, c(1, 3)] X_test_cor &lt;- X_test[, c(1, 3)] ridge &lt;- cv.glmnet(X_train_cor, y_train, alpha = 0) y_pred_cor &lt;- as.vector(predict(ridge, X_test_cor, s = &quot;lambda.min&quot;)) . Multivariate methods: the Lasso . The Lasso can be thought of as a multivariate feature selection method, as it uses all the features at the same time to select a subset. Here we are applying a Lasso because cv.glmnet does Lasso (alpha = 1) by default. . lasso &lt;- cv.glmnet(X_train, y_train) y_pred_lasso &lt;- as.vector(predict(lasso, X_test, s = &quot;lambda.min&quot;)) . Results . Coefficient comparison . By construction, the coefficients should be 1 for x1 and 0.1 for x2. In the ridge case (recall that we’ve applied univariate selection using correlation), this won’t happen as we’ve deleted x2 because the correlation with the target was too low. . coef(ridge, s = &quot;lambda.min&quot;) . ## 3 x 1 sparse Matrix of class &quot;dgCMatrix&quot; ## 1 ## (Intercept) -0.000664586 ## x1 0.589067554 ## x1a 0.439495206 . In fact, what we have is a mixture of x1 and x1a. . On the other hand, the Lasso sets the coefficients of x1a and x2a to 0 (doesn’t select those variables), and estimates the coefficents of x1 and x2 pretty well: . coef(lasso, s = &quot;lambda.min&quot;) . ## 5 x 1 sparse Matrix of class &quot;dgCMatrix&quot; ## 1 ## (Intercept) -0.0004744455 ## x1 0.9954934728 ## x2 0.0941690869 ## x1a . ## x2a . . Test set results . If you care more about model performance and not that much of proper estimation of the parameters, I also have an argument for you. The Lasso predictions are way better than the correlation method predictions: . rmse_vec(y_pred_lasso, y_test) . ## [1] 0.05027135 . rmse_vec(y_pred_cor, y_test) . ## [1] 0.1563891 . We can even interpret it: . The lasso error is around 0.05 which is the “noise size” used to generate y. | The error of the univariate method is 0.15, which is 0.05 (noise size used to generate y) plus 0.10 (error we are commiting by not considering x2). | .",
            "url": "https://david26694.github.io/david-masip-blog/r/feature-selection/2020/05/09/feature-selection-part-1.html",
            "relUrl": "/r/feature-selection/2020/05/09/feature-selection-part-1.html",
            "date": " • May 9, 2020"
        }
        
    
  
    
        ,"post4": {
            "title": "The Art of Readable Code",
            "content": "Some time ago I read The art of Readable Code. I recommend this read for every person starting a career where they have to code on a daily basis. Here’s a summary of the ideas I liked the most. . Better code . 1. Code should by easy to understand . Key ideas: Code should be easy to understand. | Code should be written to minimize the time it would take for someone else to understand it. | Smaller isn’t always better. | . | . I think defining a metric and push your efforts to improve it simplifies your life. In this case, the metric is the time that it would take for someone to understand your code. . 2. Packing information into names . Pack information into names. | Choose specific words: get is not very specific. | Avoid generic names like tmp, aux, retval. | Variable names are tiny comments. | Abbreviations: would a new teammate understand what the name means? | Summary: Use specific words. | Avoid generic names. | Attach important details. | Use capitalization, underscores and so on in a meaningful way. | . | . This chapter allowed me to give more meaningful names to variables and functions. When I define a function called get_data or a variable called data there’s something in my head telling me I should improve it. I never call a variable var anymore. . 3. Names that can’t be misconstructed . Actively scrutinize names by asking: what other meanings can be interpreted? | Summary: Play devil’s advocate with names. | When naming booleans, use words like is to make it clear. | . | . I like the idea of putting yourself into a new teammate position and see how could they fuck up due to your bad naming. . 4. Aesthetics . Use consistent layout, with patterns the reader can get used to. | Make similar code look similar. | Group related lines of code into blocks. | Aligning parts of the code into “columns” can make code easy to skim through. | If code mentions A, B, and C in one place, don’t say B, C, and A in another. Pick a meaningful order and stick with it. | Use empty lines to break apart large blocks into logical “paragraphs.” | . More aestethic code is easier to read. . 5. Knowing what to comment . The purpose of commenting is to help the reader know as much as the writer did. | Don’t comment just for the sake of commenting. | Don’t comment bad names. Fix the names instead. | Include director comments to understand the general idea. Imagine someone joins the team, what would you explain to her? These things have to be commented. | Comment your constants. | Put in the reader’s shoes. | Advertise likely pitfalls: what is surprising about the code? how it might by misused? | Summarise blocks of code so the reader doesn’t get lost in details. | . I used to write comments just to write comments. If a function is called: . get_client_ids . Please don’t add the comment . # This function gets the clients ids . 6. Making comments precise and compact . Comments should have high info-to-space ratio | Illustrate comments with carefully chosen input/output examples. | Add high-level idea of code instead of obvious details. | . Providing examples is key if you want someone to use your code. I think R does this pretty well for package developers. . Simplifying loops and logic . 7. Simplifying loops and logic . Key idea: make control flow as natural as possible. | Prefered orders in if(a == b) vs if(a != b): Prefer positive case first. | Prefer simpler case first. | Prefer more interesting case first (there can be conflicts with the above). | . | Return early from functions if possible. | Minimize nesting. | . I think it’s easier to reason about positive cases than negative (negating adds a complexity layer). . 8. Breaking down giant expressions . Key idea: break down giant expressions into more digestible pieces. | Explaining variables: use extra variables that capture subexpressions. | Beware of “clever” chunks of code: they’re often harder to read. | . This is something we’ve all been told. Split your code into functions, etc. I particularly like the warning about clever chunks of code. If you need to think very hard to code it, it’s probably going to be hard to understand. . 9. Variables and readability . Sloppy use of variables issues: The more variables, the harder to keep track of them: Eliminate variables that jut get in the way. | The bigger a variable scope, the longer you have to keep track: Make your variable visible by as few lines of code as possible. | The more often it changes, the harder it is to keep track of its value: Prefer write-once variables. | . | . I particularly like the fact that variables shouldn’t be updated a lot and that they should be in the shortest subset of code possible. . Reorganizing your code . 10. Extracting unrelated subproblems . Method to extract unrelated subproblems: For each function/block, obtain the high-level goal of the code. | For each line of code, ask if it solves the high-level goal or an unrelated subproblem. | If enough lines solve an unrelated subproblem, extract the code in a separate function. | . | Create general-purpose code: separate generic code from project-specific code. | . 11. One task at a time . Key idea: Code should be organized so that it’s doing only one task at a time. | List all tasks code is doing. Some of them might easily become functions or classes. Others become paragraphs in a funciton. | . 12. Turning thoughts into code . Process that can help you code clearly: Describe code as you would to a colleague. | Pay attention to key words. | Write code to match description. | . | The method is also valid for debugging (as describing the problem). | . 13. Writing less code . Eliminate nonessential features from product. | Rethink requirements to solve the easiest version of the problem that still gets the job done. | Stay familiar with standard libraries by reading their APIs. | .",
            "url": "https://david26694.github.io/david-masip-blog/code/2020/05/02/art-of-readable-code.html",
            "relUrl": "/code/2020/05/02/art-of-readable-code.html",
            "date": " • May 2, 2020"
        }
        
    
  

  
  

  
      ,"page1": {
          "title": "About Me",
          "content": "I’m David Masip, mathematician and physicist from Tarragona. . Currently working as a Data Scientist in Barcelona. . I plan to write about Machine Learning, and some Software Development and Mathematics. .",
          "url": "https://david26694.github.io/david-masip-blog/about/",
          "relUrl": "/about/",
          "date": ""
      }
      
  

  

  
  

  

  
  

  

  
  

  
  

  
  

  
      ,"page10": {
          "title": "",
          "content": "Sitemap: {{ “sitemap.xml” | absolute_url }} | .",
          "url": "https://david26694.github.io/david-masip-blog/robots.txt",
          "relUrl": "/robots.txt",
          "date": ""
      }
      
  

}