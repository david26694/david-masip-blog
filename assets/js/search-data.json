{
  
    
        "post0": {
            "title": "Stack-overflow developer survey",
            "content": "The aim of this post is to do some exploration of the stack overflow developer survey 2018 dataset and some modelling regarding salary. As a bonus point, we&#39;ll discuss some properties of the mean absolute error. . import pandas as pd import numpy as np import matplotlib.pyplot as plt import seaborn as sns pd.set_option(&#39;display.max_columns&#39;, None) from sklearn.model_selection import train_test_split, cross_val_score from sklearn.linear_model import LinearRegression from sklearn.impute import SimpleImputer from sklearn.preprocessing import StandardScaler from sklego.preprocessing import PandasTypeSelector from sklearn.pipeline import Pipeline from sklearn.metrics import mean_absolute_error, mean_squared_error from lightgbm import LGBMRegressor from category_encoders import TargetEncoder . so_df = pd.read_csv(&#39;stackoverflow.csv&#39;, low_memory=False) . Exploratory data analysis . Let&#39;s have a quick look at the data that we have available . so_df.head() . Respondent Hobby OpenSource Country Student Employment FormalEducation UndergradMajor CompanySize DevType YearsCoding YearsCodingProf JobSatisfaction CareerSatisfaction HopeFiveYears JobSearchStatus LastNewJob AssessJob1 AssessJob2 AssessJob3 AssessJob4 AssessJob5 AssessJob6 AssessJob7 AssessJob8 AssessJob9 AssessJob10 AssessBenefits1 AssessBenefits2 AssessBenefits3 AssessBenefits4 AssessBenefits5 AssessBenefits6 AssessBenefits7 AssessBenefits8 AssessBenefits9 AssessBenefits10 AssessBenefits11 JobContactPriorities1 JobContactPriorities2 JobContactPriorities3 JobContactPriorities4 JobContactPriorities5 JobEmailPriorities1 JobEmailPriorities2 JobEmailPriorities3 JobEmailPriorities4 JobEmailPriorities5 JobEmailPriorities6 JobEmailPriorities7 UpdateCV Currency Salary SalaryType ConvertedSalary CurrencySymbol CommunicationTools TimeFullyProductive EducationTypes SelfTaughtTypes TimeAfterBootcamp HackathonReasons AgreeDisagree1 AgreeDisagree2 AgreeDisagree3 LanguageWorkedWith LanguageDesireNextYear DatabaseWorkedWith DatabaseDesireNextYear PlatformWorkedWith PlatformDesireNextYear FrameworkWorkedWith FrameworkDesireNextYear IDE OperatingSystem NumberMonitors Methodology VersionControl CheckInCode AdBlocker AdBlockerDisable AdBlockerReasons AdsAgreeDisagree1 AdsAgreeDisagree2 AdsAgreeDisagree3 AdsActions AdsPriorities1 AdsPriorities2 AdsPriorities3 AdsPriorities4 AdsPriorities5 AdsPriorities6 AdsPriorities7 AIDangerous AIInteresting AIResponsible AIFuture EthicsChoice EthicsReport EthicsResponsible EthicalImplications StackOverflowRecommend StackOverflowVisit StackOverflowHasAccount StackOverflowParticipate StackOverflowJobs StackOverflowDevStory StackOverflowJobsRecommend StackOverflowConsiderMember HypotheticalTools1 HypotheticalTools2 HypotheticalTools3 HypotheticalTools4 HypotheticalTools5 WakeTime HoursComputer HoursOutside SkipMeals ErgonomicDevices Exercise Gender SexualOrientation EducationParents RaceEthnicity Age Dependents MilitaryUS SurveyTooLong SurveyEasy . 0 3 | Yes | Yes | United Kingdom | No | Employed full-time | Bachelor’s degree (BA, BS, B.Eng., etc.) | A natural science (ex. biology, chemistry, phy... | 10,000 or more employees | Database administrator;DevOps specialist;Full-... | 30 or more years | 18-20 years | Moderately dissatisfied | Neither satisfied nor dissatisfied | Working in a different or more specialized tec... | I am actively looking for a job | More than 4 years ago | 1.0 | 7.0 | 10.0 | 8.0 | 2.0 | 5.0 | 4.0 | 3.0 | 6.0 | 9.0 | 1.0 | 5.0 | 3.0 | 7.0 | 10.0 | 4.0 | 11.0 | 9.0 | 6.0 | 2.0 | 8.0 | 3.0 | 1.0 | 5.0 | 2.0 | 4.0 | 1.0 | 3.0 | 4.0 | 5.0 | 2.0 | 6.0 | 7.0 | I saw an employer’s advertisement | British pounds sterling (£) | 51000 | Yearly | 70841.0 | GBP | Confluence;Office / productivity suite (Micros... | One to three months | Taught yourself a new language, framework, or ... | The official documentation and/or standards fo... | NaN | NaN | Agree | Agree | Neither Agree nor Disagree | JavaScript;Python;Bash/Shell | Go;Python | Redis;PostgreSQL;Memcached | PostgreSQL | Linux | Linux | Django | React | IPython / Jupyter;Sublime Text;Vim | Linux-based | 2 | NaN | Git;Subversion | A few times per week | Yes | Yes | The website I was visiting asked me to disable it | Somewhat agree | Neither agree nor disagree | Neither agree nor disagree | NaN | 3.0 | 5.0 | 1.0 | 4.0 | 6.0 | 7.0 | 2.0 | Increasing automation of jobs | Increasing automation of jobs | The developers or the people creating the AI | I&#39;m excited about the possibilities more than ... | Depends on what it is | Depends on what it is | Upper management at the company/organization | Yes | 10 (Very Likely) | A few times per month or weekly | Yes | A few times per month or weekly | Yes | No, I have one but it&#39;s out of date | 7 | Yes | A little bit interested | A little bit interested | A little bit interested | A little bit interested | A little bit interested | Between 6:01 - 7:00 AM | 5 - 8 hours | 30 - 59 minutes | Never | Ergonomic keyboard or mouse | Daily or almost every day | Male | Straight or heterosexual | Bachelor’s degree (BA, BS, B.Eng., etc.) | White or of European descent | 35 - 44 years old | Yes | NaN | The survey was an appropriate length | Somewhat easy | . 1 7 | Yes | No | South Africa | Yes, part-time | Employed full-time | Some college/university study without earning ... | Computer science, computer engineering, or sof... | 10,000 or more employees | Data or business analyst;Desktop or enterprise... | 6-8 years | 0-2 years | Slightly satisfied | Moderately satisfied | Working in a different or more specialized tec... | I’m not actively looking, but I am open to new... | Between 1 and 2 years ago | 8.0 | 5.0 | 7.0 | 1.0 | 2.0 | 6.0 | 4.0 | 3.0 | 10.0 | 9.0 | 1.0 | 10.0 | 2.0 | 4.0 | 8.0 | 3.0 | 11.0 | 7.0 | 5.0 | 9.0 | 6.0 | 2.0 | 1.0 | 4.0 | 5.0 | 3.0 | 7.0 | 3.0 | 6.0 | 2.0 | 1.0 | 4.0 | 5.0 | My job status or other personal status changed | South African rands (R) | 260000 | Yearly | 21426.0 | ZAR | Office / productivity suite (Microsoft Office,... | Three to six months | Taken a part-time in-person course in programm... | The official documentation and/or standards fo... | NaN | NaN | Strongly agree | Agree | Strongly disagree | C;C++;Java;Matlab;R;SQL;Bash/Shell | Assembly;C;C++;Matlab;SQL;Bash/Shell | SQL Server;PostgreSQL;Oracle;IBM Db2 | PostgreSQL;Oracle;IBM Db2 | Arduino;Windows Desktop or Server | Arduino;Windows Desktop or Server | NaN | NaN | Notepad++;Visual Studio;Visual Studio Code | Windows | 2 | Evidence-based software engineering;Formal sta... | Zip file back-ups | Weekly or a few times per month | No | NaN | NaN | Somewhat agree | Somewhat agree | Somewhat disagree | Clicked on an online advertisement;Saw an onli... | 2.0 | 3.0 | 4.0 | 6.0 | 1.0 | 7.0 | 5.0 | Algorithms making important decisions | Algorithms making important decisions | The developers or the people creating the AI | I&#39;m excited about the possibilities more than ... | No | Yes, but only within the company | Upper management at the company/organization | Yes | 10 (Very Likely) | Daily or almost daily | Yes | Less than once per month or monthly | No, I knew that Stack Overflow had a jobs boar... | No, I know what it is but I don&#39;t have one | NaN | Yes | Extremely interested | Extremely interested | Extremely interested | Extremely interested | Extremely interested | Before 5:00 AM | Over 12 hours | 1 - 2 hours | Never | NaN | 3 - 4 times per week | Male | Straight or heterosexual | Some college/university study without earning ... | White or of European descent | 18 - 24 years old | Yes | NaN | The survey was an appropriate length | Somewhat easy | . 2 8 | Yes | No | United Kingdom | No | Employed full-time | Bachelor’s degree (BA, BS, B.Eng., etc.) | Computer science, computer engineering, or sof... | 10 to 19 employees | Back-end developer;Database administrator;Fron... | 6-8 years | 3-5 years | Moderately satisfied | Slightly satisfied | Working in a different or more specialized tec... | I am actively looking for a job | Between 2 and 4 years ago | 8.0 | 5.0 | 4.0 | 9.0 | 1.0 | 3.0 | 6.0 | 2.0 | 10.0 | 7.0 | 1.0 | 3.0 | 4.0 | 10.0 | 9.0 | 2.0 | 6.0 | 5.0 | 11.0 | 7.0 | 8.0 | 4.0 | 2.0 | 5.0 | 1.0 | 3.0 | 2.0 | 6.0 | 7.0 | 3.0 | 1.0 | 5.0 | 4.0 | I did not receive an expected change in compen... | British pounds sterling (£) | 30000 | NaN | 41671.0 | GBP | Confluence;Jira;Office / productivity suite (M... | Less than a month | Received on-the-job training in software devel... | The official documentation and/or standards fo... | NaN | To improve my general technical skills or prog... | Disagree | Neither Agree nor Disagree | Strongly disagree | Java;JavaScript;Python;TypeScript;HTML;CSS | C#;Go;Java;JavaScript;Python;SQL;TypeScript;HT... | MongoDB | PostgreSQL | Linux | Linux | Angular;Node.js | Node.js | IntelliJ;PyCharm;Visual Studio Code | Linux-based | 2 | Agile | Git | A few times per week | Yes | Yes | I wanted to support the website I was visiting... | Somewhat agree | Somewhat agree | Somewhat disagree | Saw an online advertisement and then researche... | 1.0 | 3.0 | 4.0 | 2.0 | 7.0 | 5.0 | 6.0 | Increasing automation of jobs | Algorithms making important decisions | A governmental or other regulatory body | I&#39;m excited about the possibilities more than ... | Depends on what it is | Depends on what it is | Upper management at the company/organization | Unsure / I don&#39;t know | 7 | A few times per month or weekly | Yes | Less than once per month or monthly | Yes | No, I have one but it&#39;s out of date | 8 | No | A little bit interested | Not at all interested | Very interested | Very interested | Extremely interested | Between 7:01 - 8:00 AM | 9 - 12 hours | 30 - 59 minutes | 1 - 2 times per week | NaN | 1 - 2 times per week | Male | Straight or heterosexual | Secondary school (e.g. American high school, G... | White or of European descent | 18 - 24 years old | No | NaN | The survey was an appropriate length | Somewhat easy | . 3 9 | Yes | Yes | United States | No | Employed full-time | Some college/university study without earning ... | Computer science, computer engineering, or sof... | 10,000 or more employees | Back-end developer;Front-end developer;Full-st... | 9-11 years | 0-2 years | Slightly satisfied | Moderately satisfied | Working as a founder or co-founder of my own c... | I’m not actively looking, but I am open to new... | Less than a year ago | 5.0 | 3.0 | 9.0 | 4.0 | 1.0 | 8.0 | 2.0 | 7.0 | 10.0 | 6.0 | 1.0 | 3.0 | 2.0 | 9.0 | 11.0 | 4.0 | 8.0 | 6.0 | 7.0 | 10.0 | 5.0 | 3.0 | 1.0 | 5.0 | 4.0 | 2.0 | 1.0 | 5.0 | 3.0 | 4.0 | 2.0 | 6.0 | 7.0 | My job status or other personal status changed | U.S. dollars ($) | 120000 | Yearly | 120000.0 | USD | Confluence;Office / productivity suite (Micros... | Six to nine months | Received on-the-job training in software devel... | The official documentation and/or standards fo... | NaN | NaN | Disagree | Agree | Strongly disagree | JavaScript;HTML;CSS | C;Go;JavaScript;Python;HTML;CSS | MongoDB | NaN | Linux | Linux | Node.js;React | React;TensorFlow | Atom;Visual Studio Code | MacOS | 2 | Agile;Scrum | Git | Multiple times per day | Yes | Yes | The ad-blocking software was causing display i... | Somewhat disagree | Neither agree nor disagree | Somewhat disagree | Clicked on an online advertisement;Stopped goi... | 1.0 | 4.0 | 2.0 | 5.0 | 3.0 | 7.0 | 6.0 | Algorithms making important decisions | Artificial intelligence surpassing human intel... | The developers or the people creating the AI | I&#39;m excited about the possibilities more than ... | Depends on what it is | Yes, but only within the company | Upper management at the company/organization | Yes | 10 (Very Likely) | Multiple times per day | Yes | I have never participated in Q&amp;A on Stack Over... | Yes | No, I have one but it&#39;s out of date | 7 | No | Very interested | A little bit interested | Extremely interested | Very interested | Very interested | Between 9:01 - 10:00 AM | Over 12 hours | Less than 30 minutes | 1 - 2 times per week | NaN | I don&#39;t typically exercise | Male | Straight or heterosexual | Master’s degree (MA, MS, M.Eng., MBA, etc.) | White or of European descent | 18 - 24 years old | No | No | The survey was an appropriate length | Somewhat easy | . 4 11 | Yes | Yes | United States | No | Employed full-time | Some college/university study without earning ... | Fine arts or performing arts (ex. graphic desi... | 100 to 499 employees | Back-end developer;C-suite executive (CEO, CTO... | 30 or more years | 21-23 years | Moderately satisfied | Moderately satisfied | Doing the same work | I’m not actively looking, but I am open to new... | Between 2 and 4 years ago | 6.0 | 3.0 | 7.0 | 4.0 | 1.0 | 5.0 | 10.0 | 8.0 | 9.0 | 2.0 | 1.0 | 3.0 | 2.0 | 9.0 | 11.0 | 5.0 | 8.0 | 4.0 | 10.0 | 7.0 | 6.0 | 5.0 | 1.0 | 2.0 | 3.0 | 4.0 | 3.0 | 7.0 | 2.0 | 4.0 | 1.0 | 6.0 | 5.0 | My job status or other personal status changed | U.S. dollars ($) | 250000 | Yearly | 250000.0 | USD | Confluence;HipChat;Jira;Office / productivity ... | Three to six months | Taken an online course in programming or softw... | The official documentation and/or standards fo... | NaN | Because I find it enjoyable | Strongly agree | Strongly disagree | Strongly disagree | Assembly;CoffeeScript;Erlang;Go;JavaScript;Lua... | Erlang;Go;Python;Rust;SQL | Redis;PostgreSQL;Amazon DynamoDB;Apache HBase;... | Redis;PostgreSQL;Amazon DynamoDB;Apache Hive;A... | Amazon Echo;AWS;iOS;Linux;Mac OS;Serverless | AWS;Linux;Mac OS;Serverless | Hadoop;Node.js;React;Spark | NaN | IntelliJ;PyCharm;Sublime Text;Vim | MacOS | 1 | Agile;Evidence-based software engineering;Extr... | Git | Multiple times per day | No | NaN | NaN | Neither agree nor disagree | Somewhat agree | Neither agree nor disagree | Clicked on an online advertisement;Saw an onli... | 1.0 | 3.0 | 5.0 | 4.0 | 2.0 | 7.0 | 6.0 | Algorithms making important decisions | Artificial intelligence surpassing human intel... | The developers or the people creating the AI | I&#39;m worried about the dangers more than I&#39;m ex... | No | Yes, and publicly | The person who came up with the idea | Yes | 7 | A few times per month or weekly | Yes | Less than once per month or monthly | Yes | Yes | 7 | No | Not at all interested | Not at all interested | Not at all interested | Not at all interested | Not at all interested | Between 8:01 - 9:00 AM | 9 - 12 hours | Less than 30 minutes | 1 - 2 times per week | Standing desk;Fatigue-relieving floor mat | I don&#39;t typically exercise | Male | Straight or heterosexual | Some college/university study without earning ... | White or of European descent | 35 - 44 years old | Yes | No | The survey was an appropriate length | Very easy | . We can see that most columns are non-numeric. Some of the few columns that are numeric are AssessJob*. Having a look at the data schema, we can see that users have to rank several features of the job that they&#39;re choosing from 1 to 10, where 1 is the most important and 10 is the least important. In the case of AssessJob5, the thing that is being rated is The compensation and benefits offered. A natural question to ask is that if people who value compensation more actually make more. The answer is in the following query: . (so_df .groupby(&#39;AssessJob5&#39;) .agg({&#39;ConvertedSalary&#39;: [&#39;mean&#39;, &#39;median&#39;, len]}) ) . ConvertedSalary . mean median len . AssessJob5 . 1.0 114636.509475 | 67512.0 | 9235.0 | . 2.0 104268.116033 | 63257.0 | 8782.0 | . 3.0 94250.374226 | 58340.0 | 7263.0 | . 4.0 89597.748557 | 52872.0 | 5719.0 | . 5.0 89341.969460 | 51408.0 | 4355.0 | . 6.0 81042.514268 | 45420.0 | 3259.0 | . 7.0 88240.893902 | 41124.0 | 2460.0 | . 8.0 74418.464066 | 37572.0 | 1948.0 | . 9.0 80024.848718 | 35178.0 | 1560.0 | . 10.0 66614.714586 | 28800.0 | 953.0 | . Indeed, people who rate the compensation as more important make on average more, both in terms of mean and median. . Before asking and attempting to answer more questions regarding the salary, let&#39;s make some utility functions that will be useful. . def p10(x: pd.Series) -&gt; float: &quot;&quot;&quot;Function that returns the 10th percentile of a pandas Series&quot;&quot;&quot; return x.quantile(.10) def p90(x: pd.Series) -&gt; float: &quot;&quot;&quot;Function that returns the 90th percentile of a pandas Series&quot;&quot;&quot; return x.quantile(.90) def salary_summary(so_df: pd.DataFrame, var: str) -&gt; pd.DataFrame: &quot;&quot;&quot;Summaries several statistics of the salary grouping by a variable&quot;&quot;&quot; return (so_df .groupby(var) .agg({&#39;ConvertedSalary&#39;: [&#39;min&#39;, p10, &#39;median&#39;, p90, &#39;mean&#39;, &#39;max&#39;, len]}) ) . salary_summary describes some statistics with respect to some grouping variable. Let&#39;s use YearsCoding as that variable. We can see that more years coding generally imply higher salaries. . salary_summary(so_df, &#39;YearsCoding&#39;) . ConvertedSalary . min p10 median p90 mean max len . YearsCoding . 0-2 years 0.0 | 1200.0 | 13212.0 | 76119.1 | 51609.611982 | 2000000.0 | 3188.0 | . 12-14 years 0.0 | 23094.3 | 67313.5 | 148801.9 | 109875.912365 | 2000000.0 | 4998.0 | . 15-17 years 0.0 | 31300.6 | 76626.5 | 165000.0 | 124343.801985 | 2000000.0 | 3828.0 | . 18-20 years 0.0 | 35244.0 | 85000.0 | 175000.0 | 128760.426768 | 2000000.0 | 3168.0 | . 21-23 years 0.0 | 41229.0 | 95552.0 | 175000.0 | 133128.075183 | 2000000.0 | 1636.0 | . 24-26 years 0.0 | 38798.4 | 96000.0 | 200000.0 | 145374.963762 | 2000000.0 | 1159.0 | . 27-29 years 0.0 | 41671.0 | 96000.0 | 200000.0 | 153732.023772 | 2000000.0 | 631.0 | . 3-5 years 0.0 | 4128.0 | 29376.0 | 96000.0 | 66707.942685 | 2000000.0 | 9788.0 | . 30 or more years 0.0 | 48616.0 | 105000.0 | 205586.2 | 155413.456875 | 2000000.0 | 2029.0 | . 6-8 years 0.0 | 7725.9 | 44287.0 | 115500.0 | 83373.084229 | 2000000.0 | 10234.0 | . 9-11 years 0.0 | 14662.5 | 55392.0 | 130000.0 | 94310.455866 | 2000000.0 | 7024.0 | . We can actually attempt to plot the evolution of the median salary in terms of years spent programming: . so_df[&#39;years_coding_int&#39;] = so_df.YearsCoding.map({ &#39;30 or more years&#39;: 35, &#39;6-8 years&#39;: 7, &#39;9-11 years&#39;: 10, &#39;0-2 years&#39;: 1, &#39;15-17 years&#39;: 16, &#39;18-20 years&#39;: 19, &#39;3-5 years&#39;: 4, &#39;12-14 years&#39;: 13, &#39;24-26 years&#39;: 25, &#39;21-23 years&#39;: 22, &#39;27-29 years:&#39;: 28 }) . year_summary = salary_summary(so_df, &#39;years_coding_int&#39;) . sns.lineplot(year_summary.index, year_summary.ConvertedSalary[&#39;median&#39;]) . &lt;matplotlib.axes._subplots.AxesSubplot at 0x1a1f972f60&gt; . A somehow expected results, the median salary increases fast at first and it slows down after some years. I did expect the saturation to happen earlier, but I was wrong apparently. . We also had a bit of a mess to get the median salary, so we&#39;ll create a helper function to create a tidier structure. . def flatten_columns(df: pd.DataFrame) -&gt; pd.DataFrame: &quot;&quot;&quot;Tidy the structure of the output of salary_summary&quot;&quot;&quot; df.columns = [&quot;_&quot;.join(df) for df in df.columns.ravel()] return df . Country evaluation . Let&#39;s see in which countries you can make more money in terms of the median. We&#39;ll use the flatten_columns function to be able to sort in an easier way: . flatten_columns(salary_summary(so_df, &#39;Country&#39;)). sort_values(&#39;ConvertedSalary_median&#39;, ascending=False) . ConvertedSalary_min ConvertedSalary_p10 ConvertedSalary_median ConvertedSalary_p90 ConvertedSalary_mean ConvertedSalary_max ConvertedSalary_len . Country . Andorra 48955.0 | 49689.4 | 525701.5 | 1000000.0 | 525089.500000 | 1000000.0 | 4.0 | . Botswana 140000.0 | 146000.0 | 170000.0 | 194000.0 | 170000.000000 | 200000.0 | 2.0 | . Saint Lucia 159852.0 | 159852.0 | 159852.0 | 159852.0 | 159852.000000 | 159852.0 | 1.0 | . Togo 24000.0 | 51095.5 | 159477.5 | 267859.5 | 159477.500000 | 294955.0 | 2.0 | . Sierra Leone 120000.0 | 120000.0 | 120000.0 | 120000.0 | 120000.000000 | 120000.0 | 1.0 | . ... ... | ... | ... | ... | ... | ... | ... | . Swaziland 1488.0 | 1586.4 | 1980.0 | 3564.0 | 2476.000000 | 3960.0 | 3.0 | . Cuba 156.0 | 794.4 | 1944.0 | 58800.0 | 62919.368421 | 1000000.0 | 19.0 | . Zambia 1824.0 | 1824.0 | 1824.0 | 1824.0 | 1824.000000 | 1824.0 | 1.0 | . Dominica 1000.0 | 1000.0 | 1000.0 | 1000.0 | 1000.000000 | 1000.0 | 1.0 | . Monaco 0.0 | 0.0 | 0.0 | 0.0 | 0.000000 | 0.0 | 1.0 | . 157 rows × 7 columns . Let&#39;s stop for a moment and analyse the issues of what we are doing: . The code starts to look messy, it&#39;s hard to read and reason about: We&#39;ll use cleaner code from now on. | I&#39;d never say that Togo is a top-earning country. An issue that we have is that top countries are the ones that have low statistical mass (the last column is the number of surveys answered in that country): We&#39;ll filter the countries that have more than x surveys to answer this question propperly. | . To write cleaner code, we can use pandas pipes. This was a big lesson to me, now I&#39;m able to write dplyr-like code in pandas. . To solve the issue of low statistical mass, we only consider countries that have more than 40 surveys finished. The results make more sense from a macroeconomic perspective, being the US and Switzerland the top earning countries: . (so_df .pipe(salary_summary, &#39;Country&#39;) .pipe(flatten_columns) .query(&#39;ConvertedSalary_len &gt; 40&#39;) .sort_values(&#39;ConvertedSalary_median&#39;, ascending=False) .head(10) ) . ConvertedSalary_min ConvertedSalary_p10 ConvertedSalary_median ConvertedSalary_p90 ConvertedSalary_mean ConvertedSalary_max ConvertedSalary_len . Country . United States 0.0 | 50000.0 | 100000.0 | 175000.0 | 154413.128506 | 2000000.0 | 12941.0 | . Switzerland 0.0 | 20938.4 | 93842.0 | 162451.6 | 138111.567812 | 1000000.0 | 553.0 | . Israel 0.0 | 35112.0 | 90642.0 | 140392.4 | 99560.527149 | 1248000.0 | 442.0 | . Norway 0.0 | 53152.0 | 82890.0 | 183633.2 | 150544.824926 | 1000000.0 | 337.0 | . Denmark 0.0 | 37640.0 | 82836.0 | 139878.0 | 100477.157303 | 1000000.0 | 356.0 | . Australia 0.0 | 41506.0 | 79973.0 | 149950.0 | 126623.720339 | 1000000.0 | 1180.0 | . Ireland 0.0 | 35492.0 | 74657.0 | 734328.0 | 186313.216718 | 1000000.0 | 323.0 | . New Zealand 0.0 | 33619.0 | 65776.0 | 166632.0 | 133835.951768 | 1000000.0 | 311.0 | . Canada 0.0 | 32209.0 | 64417.0 | 112730.0 | 100894.343419 | 2000000.0 | 1983.0 | . United Kingdom 0.0 | 31253.0 | 62507.0 | 287155.2 | 128216.930944 | 1200000.0 | 3794.0 | . We can also measure salary inequality in a given country. A common approach is to divide the 90th quantile by the 10th quantile. The bigger this ratio, the higher the inequality. Venezuela, Viet Nam and Nigeria seem to be the most unequal countries: . (so_df .pipe(salary_summary, &#39;Country&#39;) .pipe(flatten_columns) .assign(inequality=lambda x: x[&#39;ConvertedSalary_p90&#39;] / x[&#39;ConvertedSalary_p10&#39;]) .query(&#39;ConvertedSalary_len &gt; 40&#39;) .sort_values(&#39;inequality&#39;, ascending=False) .head(10) ) . ConvertedSalary_min ConvertedSalary_p10 ConvertedSalary_median ConvertedSalary_p90 ConvertedSalary_mean ConvertedSalary_max ConvertedSalary_len inequality . Country . Venezuela, Bolivarian Republic of... 24.0 | 444.0 | 8100.0 | 1000000.0 | 241823.625000 | 1000000.0 | 48.0 | 2252.252252 | . Viet Nam 0.0 | 792.0 | 9516.0 | 38400.0 | 19001.617284 | 285744.0 | 81.0 | 48.484848 | . Nigeria 0.0 | 829.0 | 6000.0 | 39196.8 | 23543.699248 | 1000000.0 | 133.0 | 47.282027 | . Iran, Islamic Republic of... 0.0 | 660.0 | 10000.0 | 25509.6 | 15644.191419 | 1000000.0 | 303.0 | 38.650909 | . Other Country (Not Listed Above) 0.0 | 6273.6 | 35274.5 | 162512.0 | 94657.119048 | 1056000.0 | 42.0 | 25.904106 | . Kenya 0.0 | 1922.4 | 12000.0 | 44400.0 | 30356.666667 | 360000.0 | 57.0 | 23.096130 | . Morocco 0.0 | 2592.0 | 12000.0 | 54046.4 | 20565.981132 | 100000.0 | 53.0 | 20.851235 | . India 0.0 | 2256.0 | 9396.0 | 46963.0 | 27694.121486 | 2000000.0 | 4091.0 | 20.816933 | . Ireland 0.0 | 35492.0 | 74657.0 | 734328.0 | 186313.216718 | 1000000.0 | 323.0 | 20.689958 | . Italy 0.0 | 20235.6 | 39164.0 | 327506.4 | 95691.657754 | 1000000.0 | 748.0 | 16.184665 | . Skills evaluation . Some columns have information regarding past experience. For instance, we have DatabaseWorkedWith. Wether this is null or not indicates if the user has experience working with databases. We&#39;re going to have a look at several experience questions to create features regarding no experience. . def na_performance(so_df: pd.DataFrame, var: str) -&gt; pd.DataFrame: &quot;&quot;&quot;Summarizes the salary statistics grouping by a variable being empty&quot;&quot;&quot; return (so_df .assign(some_experience = lambda x: ~x[var].isnull()) .pipe(salary_summary, &#39;some_experience&#39;) ) . Having db experience increases the salary in mean and median. . (so_df .pipe(na_performance, &#39;DatabaseWorkedWith&#39;) ) . ConvertedSalary . min p10 median p90 mean max len . some_experience . False 0.0 | 5640.0 | 53851.0 | 146198.8 | 93548.955018 | 2000000.0 | 7114.0 | . True 0.0 | 7884.0 | 55447.5 | 140764.0 | 96172.055854 | 2000000.0 | 40588.0 | . Having framework experience increases the salary in all statistics. . (so_df .pipe(na_performance, &#39;FrameworkWorkedWith&#39;) ) . ConvertedSalary . min p10 median p90 mean max len . some_experience . False 0.0 | 5640.0 | 50000.0 | 138660.0 | 88335.792343 | 2000000.0 | 15097.0 | . True 0.0 | 9012.0 | 57912.0 | 145000.0 | 99228.131023 | 2000000.0 | 32605.0 | . Having language exeprience increases the salary in all statistics (there are few surveys without language experience). . (so_df .pipe(na_performance, &#39;LanguageWorkedWith&#39;) ) . ConvertedSalary . min p10 median p90 mean max len . some_experience . False 0.0 | 3534.0 | 35244.0 | 125001.4 | 81521.755738 | 2000000.0 | 1220.0 | . True 0.0 | 7827.0 | 55562.0 | 142360.8 | 96155.116540 | 2000000.0 | 46482.0 | . Having gone to hackathons also helps. . (so_df .pipe(na_performance, &#39;HackathonReasons&#39;) ) . ConvertedSalary . min p10 median p90 mean max len . some_experience . False 0.0 | 7085.6 | 52872.0 | 140000.0 | 94593.563503 | 2000000.0 | 29597.0 | . True 0.0 | 8768.4 | 59172.0 | 146868.0 | 97721.787904 | 2000000.0 | 18105.0 | . Bootcamps seem to help too, in all statistics except p10. . (so_df .pipe(na_performance, &#39;TimeAfterBootcamp&#39;) ) . ConvertedSalary . min p10 median p90 mean max len . some_experience . False 0.0 | 7615.2 | 55075.0 | 141000.0 | 95649.656133 | 2000000.0 | 43194.0 | . True 0.0 | 7015.2 | 60000.0 | 145000.0 | 97038.026176 | 2000000.0 | 4508.0 | . I&#39;ve also heard that Cobol developers make a lot of money. This supports it, although we have low statistical mass for Cobol devs: . so_df[&#39;cobol&#39;] = so_df.LanguageWorkedWith.str.contains(&#39;Cobol&#39;) salary_summary(so_df, &#39;cobol&#39;) . ConvertedSalary . min p10 median p90 mean max len . cobol . False 0.0 | 7827.0 | 55562.0 | 142000.0 | 95957.630165 | 2000000.0 | 46180.0 | . True 0.0 | 8078.1 | 58749.0 | 178830.0 | 126353.529801 | 2000000.0 | 302.0 | . Modelling . Let&#39;s get started with the modelling. First of all, we&#39;ll split our data in train and test sets using a simple random split. . x_df = so_df.drop(columns=[&#39;ConvertedSalary&#39;, &#39;Salary&#39;]) y_df = so_df[&#39;ConvertedSalary&#39;] x_train, x_test, y_train, y_test = train_test_split(x_df, y_df, random_state=42) . Baselines . We&#39;re going to try 4 baselines and compare our models to these baselines: . Use the global mean to approximate the salary (no model). | Use the global median to approximate the salary (no model). | Use the country median to approximate the salary (almost no model). | Use a simple linear regression with the numeric features that we currently have. | . We are going to measure the performance of the baselines based on the test data using the mean absolute error as a metric. I like to use the mean absolute error as it is easier to interpret than the RMSE. . global_median = y_train.median() global_median . 55075.0 . global_mean = y_train.mean() global_mean . 95646.96673747763 . Our two dummiest baselines have a MAE of 70K anual dollar salary and 83k. This is pretty high, and we notice that the median is a way better estimator than the mean w.r.t the MAE. This makes sense as the median minimizes the mae. . constant_prediction = [global_median for i in y_test] mean_absolute_error(constant_prediction, y_test) . 70951.85552574208 . constant_prediction_mean = [global_mean for i in y_test] mean_absolute_error(constant_prediction_mean, y_test) . 82711.68644191355 . Let&#39;s build a simple model that estimates the salary of a survey using the median of its country. . simple_model = (x_train .assign(y=y_train) .groupby(&#39;Country&#39;) .agg({&#39;y&#39;: &#39;median&#39;}) .reset_index() ) . simple_predictions = (x_test .merge(simple_model, how=&#39;left&#39;) .loc[:, &#39;y&#39;] ) . # If no training data of that country, just use the global median simple_predictions[simple_predictions.isnull()] = global_median . The MAE of this model is significantly lower than the other baselines (around 58k). . mean_absolute_error(simple_predictions, y_test) . 58623.49387892001 . The last baseline that we are going to use is a simple linear regression with the numeric variables that we have. The linear regression model performs much worse than the dummy country model. I think this can be explained by the fact that the linear model optimizes the sum of squared errors, and this doesn&#39;t optimize the MAE in any way. . pipe = Pipeline([ (&#39;selector&#39;, PandasTypeSelector(include=&#39;float64&#39;)), (&#39;imputer&#39;, SimpleImputer(strategy=&#39;mean&#39;)), (&#39;scaler&#39;, StandardScaler()), (&#39;lr&#39;, LinearRegression()) ]) pipe.fit(x_train, y_train) mean_absolute_error(pipe.predict(x_test), y_test) . 76507.00916447907 . Improve the baseline . We&#39;ll compute some features regarding the missingness of experience: . so_df[&#39;cobol_int&#39;] = so_df[&#39;cobol&#39;].astype(float) so_df[&#39;null_db&#39;] = so_df[&#39;DatabaseWorkedWith&#39;].isnull().astype(float) so_df[&#39;null_fwork&#39;] = so_df[&#39;FrameworkWorkedWith&#39;].isnull().astype(float) so_df[&#39;null_lang&#39;] = so_df[&#39;LanguageWorkedWith&#39;].isnull().astype(float) so_df[&#39;null_hck&#39;] = so_df[&#39;HackathonReasons&#39;].isnull().astype(float) so_df[&#39;null_boot&#39;] = so_df[&#39;TimeAfterBootcamp&#39;].isnull().astype(float) . And split the data again using the same split (random_state = 42). . x_df = so_df.drop(columns=[&#39;ConvertedSalary&#39;, &#39;Salary&#39;]) y_df = so_df[&#39;ConvertedSalary&#39;] x_train, x_test, y_train, y_test = train_test_split(x_df, y_df, random_state=42) . Now we use much better modelling techniques: . New features as described above. | Target encoding of categorical features. | Lightgbm instead of linear model. And measure the cross-validation MAE | . te = TargetEncoder(cols=[&#39;Country&#39;, &#39;JobSatisfaction&#39;, &#39;CareerSatisfaction&#39;, &#39;RaceEthnicity&#39;, &#39;CompanySize&#39;, &#39;OperatingSystem&#39; ]) . pipe_lgb = Pipeline([ (&#39;endoer&#39;, te), (&#39;selector&#39;, PandasTypeSelector(include=&#39;float64&#39;)), (&#39;imputer&#39;, SimpleImputer(strategy=&#39;mean&#39;)), (&#39;lr&#39;, LGBMRegressor()) ]) . cv_lgb = cross_val_score( pipe_lgb, x_train, y_train, scoring=&#39;neg_mean_absolute_error&#39;, cv=3 ) - cv_lgb.mean() . 74719.25784492154 . Disappointingly, our model is better than the linear regression, but way worse than the country-level model. It looks like all the models that use the median are way better than the models that optimize sums of squares. . Luckily, we can change the lightgbm objective from L2 to L1, and the lightgbm will optimize the mae. . pipe_lgb = Pipeline([ (&#39;endoer&#39;, te), (&#39;selector&#39;, PandasTypeSelector(include=&#39;float64&#39;)), (&#39;imputer&#39;, SimpleImputer(strategy=&#39;mean&#39;)), (&#39;lr&#39;, LGBMRegressor(objective=&#39;regression_l1&#39;)) ]) . cv_lgb = cross_val_score( pipe_lgb, x_train, y_train, scoring=&#39;neg_mean_absolute_error&#39;, cv=3 ) - cv_lgb.mean() . 53086.352945243685 . Now we&#39;re talking, the cross-validation MAE is lower than in all baselines. Let&#39;s see if this is still true in the test data. . pipe_lgb.fit(x_train, y_train) . Pipeline(steps=[(&#39;endoer&#39;, TargetEncoder(cols=[&#39;Country&#39;, &#39;JobSatisfaction&#39;, &#39;CareerSatisfaction&#39;, &#39;RaceEthnicity&#39;, &#39;CompanySize&#39;, &#39;OperatingSystem&#39;])), (&#39;selector&#39;, PandasTypeSelector(include=&#39;float64&#39;)), (&#39;imputer&#39;, SimpleImputer()), (&#39;lr&#39;, LGBMRegressor(objective=&#39;regression_l1&#39;))]) . mean_absolute_error(pipe_lgb.predict(x_test), y_test) . 53234.00734285567 . Indeed, the model has improved on test data. MAE has gone from 58k (our best baseline) to 53k. The improvement is not huge, and in a production environment we&#39;d ask if this is necessary, but we now have a slightly better model and we can iterate with more features to improve it even more. . For instance, we haven&#39;t used programming language propperly as a feature and this can help the model significantly. . Summary . Pandas pipes allow to have way cleaner code. | When optimizing MAE, L1-like methods (least deviation regression, L1 optimization in lightgbm, median summaries) make more sense than standard methods. | .",
            "url": "https://david26694.github.io/david-masip-blog/machine-learning/regression/2020/08/22/so_eda.html",
            "relUrl": "/machine-learning/regression/2020/08/22/so_eda.html",
            "date": " • Aug 22, 2020"
        }
        
    
  
    
        ,"post1": {
            "title": "Handling imbalance in ML",
            "content": "I read about handling imbalance in machine learning very often. Sometimes I don&#39;t understand the reasons to approach class imbalance using fancy and sophisticated techniques. My main argument is, usually, that you should first try the simple solution (which is not approaching imbalance) before going to the most complex solution. . I&#39;ve decided to do an experiment to see the impact of applying over-sampling and under-sampling to answer the following questions: . Does over and under-sampling help increase the AUC of a model? | Does it depend on the algorithm used? | How do the coefficients of logistic regression change when doing over and under sampling? | . Data preparation . First of all, let&#39;s load the packages that we are going to use: . # Main tools import numpy as np import pandas as pd import seaborn as sns # Data from sklego.datasets import load_arrests # Scikit-learn classes from sklearn.preprocessing import StandardScaler from sklearn.metrics import roc_auc_score from sklearn.linear_model import LogisticRegression from sklearn.pipeline import Pipeline from sklearn.model_selection import train_test_split # Non-scikit learn classes from category_encoders import OneHotEncoder from lightgbm import LGBMClassifier from sklearn.ensemble import RandomForestClassifier from xgboost import XGBClassifier # Over and under-samplers from imblearn.over_sampling import RandomOverSampler from imblearn.under_sampling import RandomUnderSampler . Also, let&#39;s load the data. The data are on US arrests. These data are usually used to study ML bias. We are not going to focus on ML bias, because our interest is mainly the imbalance of the data. Keep in mind that any model trained on this data will very likely be racist if the bias is not addressed. . df_arrests = load_arrests(as_frame=True) df_arrests.head() . released colour year age sex employed citizen checks . 0 Yes | White | 2002 | 21 | Male | Yes | Yes | 3 | . 1 No | Black | 1999 | 17 | Male | Yes | Yes | 3 | . 2 Yes | White | 2000 | 24 | Male | Yes | Yes | 3 | . 3 No | Black | 2000 | 46 | Male | Yes | Yes | 1 | . 4 Yes | Black | 1999 | 27 | Female | Yes | Yes | 1 | . The imbalance is not very big - 83 vs 17%, but there is some imbalance: . fraction = df_arrests.released.value_counts() / df_arrests.shape[0] round(100 * fraction, 2) . Yes 82.93 No 17.07 Name: released, dtype: float64 . That is, 17% of cases have not been released. . df_arrests_x = df_arrests.drop(columns=&#39;released&#39;) df_arrests_y = df_arrests[&#39;released&#39;].map({&#39;Yes&#39;: 0, &#39;No&#39;: 1}) df_train_x, df_test_x, df_train_y, df_test_y = train_test_split( df_arrests_x, df_arrests_y, random_state=42 ) . We also create a basic class that will help make our code more uniform . class IdentitySampler(): def __init__(self): pass def fit_resample(self, X, y): return X, y . We&#39;re going to try several samplers: over-sampling, under-sampling and no-sampling together with several algorithms: logistic regression, lightgbm, random forest and xgboost. . By no-sampling we mean not addressing the imbalance. . samplers = { &#39;identity&#39; : IdentitySampler(), &#39;over&#39; : RandomOverSampler(random_state=42), &#39;under&#39; : RandomUnderSampler(random_state=42) } learners = { &#39;logistic&#39;: LogisticRegression(), &#39;lgbm&#39;: LGBMClassifier(random_state=42), &#39;rf&#39;: RandomForestClassifier(random_state=42), &#39;xgb&#39;: XGBClassifier(random_state=42) } . Performance comparison . coefficients = list() intercepts = list() for learner_name, learner in learners.items(): # Define learner pipe = Pipeline([ (&#39;oh&#39;, OneHotEncoder()), (&#39;scaler&#39;, StandardScaler()), (&#39;learner&#39;, learner) ]) for sampler_name, sampler in samplers.items(): # Obtain resampled training data X_sampled, y_sampled = sampler.fit_resample(df_train_x, df_train_y) pipe.fit(X_sampled, y_sampled) # Compute ROC AUC test_roc = roc_auc_score(df_test_y, pipe.predict_proba(df_test_x)[:,1]).round(4) print( f&#39;ROC test {sampler_name}-sampling, {learner_name}: {test_roc}&#39; ) # For logistic regression, save coefficients and intercept if learner_name == &#39;logistic&#39;: intercept = pipe[-1].intercept_[0].round(3) coefficients.append( pipe[-1].coef_[0] ) intercepts.append(intercept) print(&quot;-&quot;) . ROC test identity-sampling, logistic: 0.7128 ROC test over-sampling, logistic: 0.7109 ROC test under-sampling, logistic: 0.7134 - ROC test identity-sampling, lgbm: 0.6936 ROC test over-sampling, lgbm: 0.6926 ROC test under-sampling, lgbm: 0.6869 - ROC test identity-sampling, rf: 0.6403 ROC test over-sampling, rf: 0.6277 ROC test under-sampling, rf: 0.6501 - ROC test identity-sampling, xgb: 0.6774 ROC test over-sampling, xgb: 0.6529 ROC test under-sampling, xgb: 0.6667 - . For most models and datasets, the three methods have almost no difference. . Over-sampling doesn&#39;t win in any case, and it&#39;s the worst in 3 cases. | Under-sampling wins twice, no sampling wins twice. | . Logistic regression case . In the logistic regression case, we can have a look at the coefficients to try to understand what over and under-sampling are doing. . # Prepare coefficients dataframe coefficients = pd.DataFrame(np.array(coefficients).T) intercepts = pd.DataFrame(np.array(intercepts)).T coefficients.columns = samplers.keys() intercepts.columns = samplers.keys() coefficients = intercepts.append(coefficients) # Clean data to plot coefficents_long = coefficients.melt(var_name=&#39;sampling&#39;, value_name=&#39;coefficient&#39;) coefficents_long[&#39;index&#39;] = list(range(coefficients.shape[0])) * 3 coefficents_long[&#39;intercept&#39;] = coefficents_long[&#39;index&#39;] == 0 . We can see that most coefficients are very similar in the 3 cases, but the first coefficient changes significantly (in this case, the intercept). The effect on the coefficients of under or over-sampling is increasing the intercept. This completely makes sense - the intercept represents, in a way, the fraction of cases with target 1. By changing this fraction we are artificiallt increasing the intercept. . sns.lineplot(data=coefficents_long, y=&#39;coefficient&#39;, x=&#39;index&#39;, hue=&#39;sampling&#39;) . &lt;matplotlib.axes._subplots.AxesSubplot at 0x1a2122feb8&gt; . Summary . No significant change in terms of predictive performance is observed after performing over or under sampling. | In the logistic regression case, the impact of changing the data to balanced data only impacts the intercept, making it bigger. | .",
            "url": "https://david26694.github.io/david-masip-blog/machine-learning/classification/2020/08/15/imbalance.html",
            "relUrl": "/machine-learning/classification/2020/08/15/imbalance.html",
            "date": " • Aug 15, 2020"
        }
        
    
  
    
        ,"post2": {
            "title": "Github actions for automated testing",
            "content": "I recently started using github actions to test my python package sktools. It looks like a fairly easy tool to use, and I find it very powerful. . The idea is to create workflows that automate actions for you. According to the docs: . Workflows are custom automated processes that you can set up in your repository to build, test, package, release, or deploy any project on GitHub. . Creating a workflow is as simple as creating a yml file in .github/workflows. The file I’ve created looks like this, and it installs the sktools package in several environments and runs its tests: . # Action title name: Unit Tests # Controls when the action will run. on: schedule: - cron: &quot;0 0 * * *&quot; # A workflow run is made up of one or more jobs that can run sequentially or in parallel jobs: # This workflow contains a single job called &quot;build&quot; build: # The type of runner that the job will run on runs-on: $ strategy: matrix: python-version: [3.6, 3.7] os: [macos-10.15, ubuntu-latest, windows-latest] # Steps represent a sequence of tasks that will be executed as part of the job steps: # Runs a single command using the runners shell - uses: actions/checkout@v2 - name: Set up Python $ uses: actions/setup-python@v1 with: python-version: $ - name: Install dependencies run: | python -m pip install --upgrade pip pip install sktools pip freeze - name: Test with pytest run: | make test . Let’s look at what each step does. . The name key is provided so it’ll be easily identified in the actions tab. The on key controls when the workflow will be run. In this case, it is scheduled via a cron that runs the action on a daily basis, at midnight. . # Workflow title name: Unit Tests # Controls when the action will run. on: schedule: - cron: &quot;0 0 * * *&quot; . Alternative on options are: . on: push: branches: - master pull_request: branches: - master . Which would run the workflow when master branch is updated and on pull requests. Of course on can handle all of them at the same time. . After that, you can specify several jobs for the workflow to run. In our case, we’ve specified a single job called build. We’ve also specified on which environments do we need to run it on. The idea is that the instructions that we’ll specify afterwards will run in mac, ubuntu and windows and both in python 3.6 and 3.7 for each of the OS. And this is without even having python 3.6 in my computer, and only one OS. This way I can ensure that my library works not only in my computer. . # A workflow run is made up of one or more jobs that can run sequentially or in parallel jobs: # This workflow contains a single job called &quot;build&quot; build: # The type of runner that the job will run on runs-on: $ strategy: matrix: python-version: [3.6, 3.7] os: [macos-10.15, ubuntu-latest, windows-latest] . In the following lines we define the steps that each execution of the workflow will carry. Each step is defined by a yaml key, the first one being the checkout. The checkout gets the latest commit of your repo. The second action, with name Set up Python 3.x, will create a python environment. . Both these steps are open source (setup python, checkout), and you can also build your own custom steps. . # Steps represent a sequence of tasks that will be executed as part of the job steps: # Runs a single command using the runners shell - uses: actions/checkout@v2 - name: Set up Python $ uses: actions/setup-python@v1 with: python-version: $ . The last steps are the most specific to our job. The “Install dependencies” job installs sktools and the last step runs the tests in sktools. . - name: Install dependencies run: | python -m pip install --upgrade pip pip install sktools pip freeze - name: Test with pytest run: | make test . The make test is specific to our project as we run the tests from a Makefile. However, as in the Makefile we have the lines . test: python setup.py test . changing the make test by python setup.py test won’t make any difference. By looking in the workflow run in the actions tab on github, we can see in its logs: . test_basic_featurizer (tests.test_sktools.TestGroupQuantileFeaturizer) ... ok test_missing (tests.test_sktools.TestGroupQuantileFeaturizer) ... ok test_new_input (tests.test_sktools.TestGroupQuantileFeaturizer) ... ok test_select_items (tests.test_sktools.TestItemSelector) ... ok test_zero_matrix (tests.test_sktools.TestMatrixDenser) ... ok test_basic_featurizer (tests.test_sktools.TestMeanFeaturizer) ... ok test_missing (tests.test_sktools.TestMeanFeaturizer) ... ok test_new_input (tests.test_sktools.TestMeanFeaturizer) ... ok test_float_works (tests.test_sktools.TestTypeSelector) ... ok test_integer_works (tests.test_sktools.TestTypeSelector) ... ok test_object_works (tests.test_sktools.TestTypeSelector) ... ok test_all_missing (tests.test_encoders.TestNestedTargetEncoder) ... ok test_missing_na (tests.test_encoders.TestNestedTargetEncoder) ... ok test_no_parent (tests.test_encoders.TestNestedTargetEncoder) ... ok test_numpy_array (tests.test_encoders.TestNestedTargetEncoder) ... ok test_parent_prior (tests.test_encoders.TestNestedTargetEncoder) ... ok test_unknown_missing_imputation (tests.test_encoders.TestNestedTargetEncoder) ... ok test_max_works (tests.test_encoders.TestQuantileEncoder) ... ok test_median_works (tests.test_encoders.TestQuantileEncoder) ... ok test_new_category (tests.test_encoders.TestQuantileEncoder) ... ok test_several_quantiles (tests.test_encoders.TestSummaryEncoder) ... ok test_period_mapping (tests.test_preprocessing.TestCyclicFeaturizer) Expect same output by specifying period mapping ... ok test_trigonometry (tests.test_preprocessing.TestCyclicFeaturizer) Expect cosines and sines to work ... ok test_with_intercept (tests.test_linear_model.TestQuantileRegression) ... ok test_without_intercept (tests.test_linear_model.TestQuantileRegression) ... ok test_1_tree (tests.test_ensemble.TestMedianForest) ... ok test_2_trees (tests.test_ensemble.TestMedianForest) ... ok test_many_trees (tests.test_ensemble.TestMedianForest) ... ok test_cross_val_integration (tests.test_model_selection.TestBootstrapFold) Check cv is compatible with cross_val_score ... ok test_grid_integration (tests.test_model_selection.TestBootstrapFold) Check that cv is compatible with GridSearchCV ... ok test_n_splits (tests.test_model_selection.TestBootstrapFold) Check that get_n_splits returns the number of bootstraps ... ok test_size_fraction_works (tests.test_model_selection.TestBootstrapFold) Check that size_fraction works as expected ... ok - Ran 36 tests in 2.041s OK . The tests are passing, yay! .",
            "url": "https://david26694.github.io/david-masip-blog/code/2020/08/01/github-actions.html",
            "relUrl": "/code/2020/08/01/github-actions.html",
            "date": " • Aug 1, 2020"
        }
        
    
  
    
        ,"post3": {
            "title": "Sample and effect sizes in hypothesis testing",
            "content": "One of the most troubling thing about p-values is the fact that if you gather more data the p-value naturally decreases. So, give me enough data and I will reject any null hypothesis, sort of. It makes sense that with more data I would be able to measure smaller effects. However, the whole effect size - data size coupling is what bothers me the most. Let’s make a quick experiment. . First of all, the libraries we’ll use have to be loaded. . # Libraries library(dplyr) library(purrr) library(ggplot2) theme_set(theme_minimal()) . Let’s create a function that, given a sample size and effect size, returns the p-value of the t-test that compares two normal distributions with variance 1 and difference in means equal to the given effect size. . # Given sample size n and effect, compute the p-value of # t-test generating the respective samples t_test_value &lt;- function(n, effect) { t.test(rnorm(n), rnorm(n, effect))$p.value } # Surprisingly logarithmic sequences don&#39;t exist in base R lseq &lt;- function(from, to, length.out) { # logarithmic spaced sequence # blatantly stolen from library(&quot;emdbook&quot;), because need only this exp(seq(log(from), log(to), length.out = length.out)) } . We can run this function for different sample and effect sizes and see when we would reject assuming a type 1 error of 5%. . # Experiment # Create pairs of samples sizes and effects results_tbl &lt;- expand.grid( as.integer(lseq(50, 1e5, 100)), 5:100 * 0.001 ) names(results_tbl) &lt;- c(&quot;n&quot;, &quot;effect&quot;) # We make use of the elegant purrr # to apply the funciton in the grid results_tbl$p_values &lt;- map2_dbl( .x = results_tbl$n, .y = results_tbl$effect, t_test_value ) results_tbl$hypothesis &lt;- if_else( results_tbl$p_values &lt; 0.05, &#39;rejects&#39;, &#39;accepts&#39; ) . # Plot ggplot(results_tbl, aes(x = n, y = effect, fill = hypothesis)) + geom_tile() + scale_x_log10() . . We can see that, given enough data, we reject for almost all the effect sizes. And conversely, given an effect size, it’s only a matter of getting enough data to reject the null hypothesis. I find this very troubling. . I even think one can analytically derive the equation of the curves in the effect and sample size space that have constant p-value, which should approximate the line that splits the red and blue dots in the picture, but I’ll leave that to the reader. .",
            "url": "https://david26694.github.io/david-masip-blog/r/probability-theory/hypothesis-testing/2020/07/24/sample-size.html",
            "relUrl": "/r/probability-theory/hypothesis-testing/2020/07/24/sample-size.html",
            "date": " • Jul 24, 2020"
        }
        
    
  
    
        ,"post4": {
            "title": "Survival analysis",
            "content": "One year ago I joined a hackathon with some friends. The topic of the hackathon was survival analysis. In particular, we worked to predict the survival of melanoma patients. Survival analysis is different from other supervised learning frameworks for the two following reasons: . The output of the algorithm is a curve of probabilities that depend on time. This makes it different from the classification setting where the output is a probability or some probabilities that sum up to one. The functional object to be described is substantially different. This curve is known as survival curve and will be denoted as $S(t)$. | Censoring: for many observations, we don’t have all the information (they are censored). In the medical setting, these might be patients that stopped going to the doctor and we are not really sure about their health status. | . A business application of survival analysis is predicting survival curves for a customer using a product. This, is we want to estimate the probability of the customer to still use the product at a given time $t$ in the future. This might allow to compute lifetime values for customers. Wether there is censoring or not might depend on the business setting. . Brier score . The metric we were asked to optimize was the Brier score. . Let’s say we are asked to predict in times from 0 to $T$. If a patient dies at time $t’$ and the output of our model is a function $S(t)$, the Brier score for that patient is: . ∑t=0t′(1−S(t))2+∑t=t′TS(t)2 sum_{t=0}^{t&amp;#x27;} (1 - S(t))^2 + sum_{t=t&amp;#x27;}^{T} S(t)^2t=0∑t′​(1−S(t))2+t=t′∑T​S(t)2 . Which is roughly the L2 distance between the survival curve S(t) and the target curve. . For patients that survive until time $T$, the L2 distance is also used (same formula as above, but changing $t’$ by $T$). . For patients that are censored, the metric is similar but some weights multiply it according the the conditional survival function. . If we want to compute the Brier score of the whole population, we just aggregate using the mean of every individual Brier score. . Classic methods . Kaplan-Meier . The Kaplan-Meier estimator should be the baseline for any survival analysis model development. The Kaplan-Meier estimator is the equivalent of a constant model that just predicts the mean of the training observations in the regression setting. . If at time $t_i$ there are $n_i$ patients alive (and not censored) and $d_i$ dead patients, the Kaplan-Meier curve is defined via the following: . S(t)=∏ti≤t(1−dini)S(t) = prod_{t_i leq t} left(1 - frac{d_i}{n_i} right)S(t)=ti​≤t∏​(1−ni​di​​) . If there isn’t any death or censoring between $t_1$ and $t_2$ in the training set, then $S(t_1) = S(t_2)$. . Cox model . The cox model estimates the hazard function instead of the surival function. The hazard function is defined as the death rate at time t conditional on survival until time t or later. It is related to the survival function by the following equation: . h(t)=−S′(t)S(t)h(t) = - frac{S&amp;#x27;(t)}{S(t)}h(t)=−S(t)S′(t)​ . And conversely: . S(t)=exp(−∫0th(u)du)S(t) = exp left(- int_0^t h(u)du right)S(t)=exp(−∫0t​h(u)du) . Given some features $(x_1, dots,x_n)$ and some coefficients $(b_1, dots,b_n)$, the Cox model obtains the hazard function by . h(t)=h0(t)exp(b1x1+⋯+bnxn)h(t) = h_0(t)exp(b_1x_1 + dots + b_nx_n)h(t)=h0​(t)exp(b1​x1​+⋯+bn​xn​) . The main assumption in the cox model are the so called proportional hazards. Proportional hazards intuitively mean that if individual A has higher survival probability at a time $t_1$ than individual B, then it has a higher survival probability at all times. . Both linear dependence from the coefficients and proportional hazards are assumptions that make the Cox model, in general, a high bias model. . This is the model our team used to calculate survival curves. Most of the work we did was based on feature engineering. . Metric-optimizing approach . Unfortunately our model ended up in second position, far from the first place in the leaderboard. . This section explains the first team solution. . Let us recall what the Brier score for a set of individuals is defined as . BS=1NT∑i=1N∑t=0Twi(t)(yi(t)−Si(t))2BS = frac{1}{NT} sum_{i=1}^N sum_{t=0}^{T} w_i(t) (y_i(t) - S_i(t))^2BS=NT1​i=1∑N​t=0∑T​wi​(t)(yi​(t)−Si​(t))2 . where $y_i(t)$ is the survival target for that patient, being 1 before death time and 0 after death time, and $w_i(t)$ the censoring weights for that patient. A nice trick is to reformulate the sum as . BS=1NT∑t=0T∑i=1Nwi(t)(yi(t)−Si(t))2BS = frac{1}{NT} sum_{t=0}^T sum_{i=1}^{N} w_i(t) (y_i(t) - S_i(t))^2BS=NT1​t=0∑T​i=1∑N​wi​(t)(yi​(t)−Si​(t))2 . Every of the inner summands can be thought as a regression problem. So, $T$ independent regression models can be trained, with any algorithm or method you want, and this directly optimizes the Brier score. On the other hand, the Cox model doesn’t optimize the Brier score directly. . This trick allowed the first team to optimize the metric and have better predictive curves. These curves had a property that would have made any statistician cry, as they survival function was non-monotonous. However, their error metric was way lower. .",
            "url": "https://david26694.github.io/david-masip-blog/machine-learning/statistics/2020/06/06/survival.html",
            "relUrl": "/machine-learning/statistics/2020/06/06/survival.html",
            "date": " • Jun 6, 2020"
        }
        
    
  
    
        ,"post5": {
            "title": "slider package",
            "content": "slider is an R package that allows to perform sliding window calculations. In this post we’re going to see how slider can be used to perform feature engineering for sales forecasting problems. . Problem formulation . Your are working on a demand prediction problem. You have sales data that has the following structure: . ## shop product date units_sold ## 1 A iogurt 2020-02-01 11 ## 2 A iogurt 2020-02-02 15 ## 3 A iogurt 2020-02-03 14 ## 4 B iogurt 2020-02-01 25 ## 5 B iogurt 2020-02-02 33 ## 6 B iogurt 2020-02-03 33 . And you want to predict, for each shop and each product, the units that will be sold during the following day. . To do so, you’ll create features like: . How much was the product sold on average during last week in that shop. | How much was the product sold on average during last week in all shops. | How much was the shop selling on average during last week. | Similar features but using last month data, instead of last week. Or maybe even using the over-all sales history that we have. | Perhaps we want compute averages by using the mean, but maybe we want the median, maximum and minimum units sold during the week. | . I think slider is one of the simplest ways of doing this. . Introduction to slider . Slider has a main function, slide, and variations of it. According to the documentation, . slide() iterates through .x using a sliding window, applying .f to each sub-window of .x. . The sub-window of .x is highly customizable. The parameters to customize the sub-window are mainly .before, .after, .step and .complete. . Let’s see it with some examples. Compute the over-all sales in shop A until today (this is not a feature we want to train our model on, but something to see the behaviour of slide): . # Cumulative sold items until today sales_tbl %&gt;% filter(shop == &#39;A&#39;) %&gt;% mutate( # (slightly technical warning) We&#39;re going to be using # slide_vec instead of slide, they&#39;re basically the same, # but slide_vec returns a vector, whereas slide returns a list sum_sold_wrong = slide_vec(.x = units_sold, .f = sum, .before = Inf) ) . ## shop product date units_sold sum_sold_wrong ## 1 A iogurt 2020-02-01 11 11 ## 2 A iogurt 2020-02-02 15 26 ## 3 A iogurt 2020-02-03 14 40 . The .before parameter indicates how many days do we go back to aggregate the sold units. If we set it to Inf, it computes the units sold until today. . The issue is that this sum_sold_wrong has the units that have been sold including today. If we want to exclude today’s data, which makes sense as we want to predict without today’s information, slider has this nice trick (setting .after = -1): . # Here we are excluding today! sales_tbl %&gt;% filter(shop == &#39;A&#39;) %&gt;% mutate( sum_sold_right = slide_vec(.x = units_sold, .f = sum, .before = Inf, .after = -1) ) . ## shop product date units_sold sum_sold_right ## 1 A iogurt 2020-02-01 11 0 ## 2 A iogurt 2020-02-02 15 11 ## 3 A iogurt 2020-02-03 14 26 . Setting .after to -1 is kind of dark but it will be used a lot when doing forecasting using slider. It is important to use a negative .after since we don’t want to leak information from the future into our pipeline. . Feature engineering with slider . Let’s say we want to compute features at shop level: . Mean of units sold during the last week for each shop. | Mean of units sold during the last month for each shop. | Mean of units sold over-all for each shop. | Max of units sold during the last week for each shop. | Max of units sold during the last month for each shop. | Max of units sold over-all for each shop. | . What I like about slider is that explaining the features takes more time than coding them: . sales_tbl &lt;- sales_tbl %&gt;% group_by(shop) %&gt;% # Shop-level features mutate( # Mean of units sold during the last week mean_sold_shop_week = slide_vec(.x = units_sold, .f = mean, .before = 7, .after = -1), # Mean of units sold during the last month mean_sold_shop_month = slide_vec(.x = units_sold, .f = mean, .before = 30, .after = -1), # Mean of units sold over-all mean_sold_shop = slide_vec(.x = units_sold, .f = mean, .before = Inf, .after = -1), # Max of units sold during the last week max_sold_shop_week = slide_vec(.x = units_sold, .f = max, .before = 7, .after = -1), # Max of units sold during the last month max_sold_shop_month = slide_vec(.x = units_sold, .f = max, .before = 30, .after = -1), # Max of units sold over-all max_sold_shop = slide_vec(.x = units_sold, .f = max, .before = Inf, .after = -1) ) . If we want to do the same at product level, we only have to change the grouping variable (and variable names): . sales_tbl &lt;- sales_tbl %&gt;% group_by(product) %&gt;% # Product-level features mutate( # Mean of units sold during the last week mean_sold_product_week = slide_vec(.x = units_sold, .f = mean, .before = 7, .after = -1), # Mean of units sold during the last month mean_sold_product_month = slide_vec(.x = units_sold, .f = mean, .before = 30, .after = -1), # Mean of units sold over-all mean_sold_product = slide_vec(.x = units_sold, .f = mean, .before = Inf, .after = -1), # Max of units sold during the last week max_sold_product_week = slide_vec(.x = units_sold, .f = max, .before = 7, .after = -1), # Max of units sold during the last month max_sold_product_month = slide_vec(.x = units_sold, .f = max, .before = 30, .after = -1), # Max of units sold over-all max_sold_product = slide_vec(.x = units_sold, .f = max, .before = Inf, .after = -1) ) . Same if we want features at shop and product level: . sales_tbl &lt;- sales_tbl %&gt;% group_by(shop, product) %&gt;% # Product-level features mutate( # Mean of units sold during the last week mean_sold_sh_product_week = slide_vec(.x = units_sold, .f = mean, .before = 7, .after = -1), # Mean of units sold during the last month mean_sold_sh_product_month = slide_vec(.x = units_sold, .f = mean, .before = 30, .after = -1), # Mean of units sold over-all mean_sold_sh_product = slide_vec(.x = units_sold, .f = mean, .before = Inf, .after = -1), # Max of units sold during the last week max_sold_sh_product_week = slide_vec(.x = units_sold, .f = max, .before = 7, .after = -1), # Max of units sold during the last month max_sold_sh_product_month = slide_vec(.x = units_sold, .f = max, .before = 30, .after = -1), # Max of units sold over-all max_sold_sh_product = slide_vec(.x = units_sold, .f = max, .before = Inf, .after = -1) ) . If we want to take into consideration the day of week, we can use the .step parameter. The following call to slide_vec computes the mean of units sold of the last 4 days of that weekday. . sales_tbl &lt;- sales_tbl %&gt;% ungroup() %&gt;% mutate( day_of_week_effect = slide_vec(.x = units_sold, .f = mean, .before = 4, .step = 7, .after = -1), ) . With very few lines of code we’ve managed to build features that very predictive of our outcome. Moreover, we are not leaking information from the future. A supervised learning model could be trained on these features and we can have very quickly a very decent baseline to start iterating on. . Why slider? . For some of this quantities, the use of slider seems kind of an over-kill. For instance, the over-all mean of units sold in a given shop can be done in two different ways: . # Slider way sales_tbl &lt;- sales_tbl %&gt;% group_by(shop) %&gt;% mutate( mean_sold_shop = slide_vec(.x = units_sold, .f = mean, .before = Inf, .after = -1) ) # Simple way sales_tbl &lt;- sales_tbl %&gt;% group_by(shop) %&gt;% mutate( mean_sold_shop = mean(units_sold) ) . Why would I rather use the slider way? The reason is that the simple way leaks information from the future. That is, it uses the target of a row to create a feature, and then we are going to use that feature to predict the target. We might end up over-trusting the mean_sold_shop feature. This might have two consequences: . If we do it right, by only using the train set to compute mean_sold_shop the model might degrade in the test set. This is not ideal, but we can live with it. | If we do it wrong, by using the test set to compute mean_sold_shop the model will degrade in production, which is a bigger trouble. | . With slider, you don’t have to worry about none of the above since you are only using information from the past. .",
            "url": "https://david26694.github.io/david-masip-blog/r/feature-engineering/2020/05/30/slider.html",
            "relUrl": "/r/feature-engineering/2020/05/30/slider.html",
            "date": " • May 30, 2020"
        }
        
    
  
    
        ,"post6": {
            "title": "A bayesian trick for feature engineering",
            "content": "Problem formulation . You are building a model and, for the entity you want to infer, there is a history of binary events. For instance: . Finance case: If you want to predict if someone will repay a loan, you have a history of the loans that they paid late or not. | Marketing case: If you want to predict if someone will buy in an e-commerce, you have a history of times they clicked (or not clicked) in the ads that were sent via email. | Logistics case: If you want to estimate the delay in the delivery of a package from a courier, you have a history of times that the courier arrived late to the package pick-up. | . The naive method to deal with these event histories is to compute fractions regarding the past data. For the finance case, for instance, you’d compute the fraction of past loans what have been paid late. The higher this feature is, the more unlikely is the person to repay their loan. Everything looks right in here. . However, when estimating these fractions, we have to be careful about the statiscal mass. If a client (A) has only recieved an email and not opened it, the fraction of opened emails will be 0. This is very different from another client (B) who’s recieved 30 emails and not opened them. . Client A fraction of email clicking will be 0, but we have very low statistical mass, so we are underestimating its interest in buying. | Client B fraction of email clicking will be 0, but we are pretty sure the client is not very interested in the ads we send. | . In the loan case, if client C has got only 1 loan and paid it late, the fraction of late payments will be 1. If client D has got 10 loans and paid all of them late, they will also have this fraction to 1. . Client C fraction of late payments will be 1, but we are not very sure if client C is a late payer. | Client D fraction of late payments will be 1, and we are more sure that client D is a late payer. | . This feature might be a good predictor but it seems to perform badly when new clients join: they might have this feature very high or very low just by chance, and this might hurt the model performance in this population. . Bayesian statistics approach . A solution to this cold-start issue is to estimate fractions using a bayesian approach. Mathematically, the events can be modelled using a Bernoulli distribution of probability $p$, where $p$ depends on each client. . The simplest bayesian solution to estimating the parameter of a Bernoulli is the following (see this post): . Assume $p$ has a beta distribution. | Update the beta parameters using the data from that client. | Estimate $p$ as the mean of the posterior distribution. | . We use the beta distribution because it is the conjugate prior of the Bernoulli. One issue that we have is providing the parameters $ alpha$ and $ beta$ of the prior distribution. . If we don’t want to assume much about $p$, we can use Jeffreys prior. In the beta distribution case, this is achieved by setting $ alpha = beta = 1/2$. In this case, if the client has gone through $n$ events and $x$ of them have been successes ($n$ emails sent, $x$ of them opened), the bayesian fraction will be the following: . p^=x+0.5n+1 hat{p} = frac{x + 0.5}{n + 1}p^​=n+1x+0.5​ . On the other hand, without the bayesian trick we would do $ hat{p} = frac{x}{n}$. . If we know something about the distribution of $p$, we can assume more and choose $ alpha$ and $ beta$ such that the beta distribution represents our prior belief (I know this is a bit heuristic), here’s an app to explore the possible priors for the beta distribution. . Extras . This is not exclusive from estimating proportions, any feature that is an estimation of a parameter from a known distribution can be modelled in this way, but using another bayesian prior and update rule. | A particular case of this is target encoding, which can be done using maximum likelihood or in a bayesian way. | .",
            "url": "https://david26694.github.io/david-masip-blog/feature-engineering/bayesian-statistics/2020/05/23/bayesian-feature-engineering.html",
            "relUrl": "/feature-engineering/bayesian-statistics/2020/05/23/bayesian-feature-engineering.html",
            "date": " • May 23, 2020"
        }
        
    
  
    
        ,"post7": {
            "title": "Feature selection part 2",
            "content": "In part 1, I showed some of the dangers of using univariate selection methods. In part 2 I want to focus on the pitfalls of feature importance in random forests and gradient boosting methods. . I’ll write about it in the feature selection chapter as feature importances can be used to select features, as in Sklearn SelectFromModel. . In order to select features using feature importances, one can: . Train a model that has allows to compute feature importances. | Retrain the model with only the most important features. | . In my experience, when retraining with only the most important features, the model usually degrades a little. . The main issue regarding selecting features using feature importance is that, if a feature is highly correlated with others, its importance will be lower than if it isn’t correlated with any features. For this reason I advise to check that your features are not very correlated if you want to assess them using feature importance. . Experiment set-up . In order to show the issues of selecting features using feature importance, we’ll use a rather ill-defined example. In this example, x1, x2, x3 and x4 are independent variables and the dependent variable is . y ~ x1 + (x2 + x3 + x4) * 0.5 + noise . When training a random forest, x1 should appear as the most important variable. If the feature selection method had to keep only one feature, x1 should be the one to select. . To see an example where feature importance might mislead you, we’ve created some brothers to x1. They are variables that are very correlated to x1 and will be used to model y as well. These brothers are what cause the importance of x1 to be diminished. . library(&quot;dplyr&quot;) library(&quot;randomForest&quot;) library(&quot;glmnet&quot;) set.seed(42) len &lt;- 5000 x1 &lt;- rnorm(len) x2 &lt;- rnorm(len) x3 &lt;- rnorm(len) x4 &lt;- rnorm(len) # The outcome is created without the brothers y &lt;- x1 + 0.5 * x2 + 0.5 * x3 + 0.5 * x4 + rnorm(len) # x1i are x1&#39;s &quot;brothers&quot;: variables that are mainly x1 but with some noise x11 &lt;- 0.95 * x1 + 0.05 * rnorm(len) x12 &lt;- 0.95 * x1 + 0.05 * rnorm(len) x13 &lt;- 0.95 * x1 + 0.05 * rnorm(len) x14 &lt;- 0.95 * x1 + 0.05 * rnorm(len) x15 &lt;- 0.95 * x1 + 0.05 * rnorm(len) x16 &lt;- 0.95 * x1 + 0.05 * rnorm(len) x17 &lt;- 0.95 * x1 + 0.05 * rnorm(len) x18 &lt;- 0.95 * x1 + 0.05 * rnorm(len) . Then we create the feature matrix, with x1 to x4, as well as x1’s brothers. . model_tbl &lt;- tibble( y = y, x1 = x1, x2 = x2, x3 = x3, x4 = x4, x11 = x11, x12 = x12, x13 = x13, x14 = x14, x15 = x15, x16 = x16, x17 = x17, x18 = x18 ) X &lt;- as.matrix(select(model_tbl, -y)) . Random forest importance . A random forest model is trained (when training this model, it automatically computes feature importance). . rf &lt;- randomForest(X, y, importance = T) . And we show the importance of the features: . varImpPlot(rf, type = 1) . . This shows the shortcomings of feature importance: x1 doesn’t appear as the most important feature. If we were to select three variables, we would select x2, x3 and x4, and this would of course degrade the model performance. . Thinking about it, it makes sense. In this random forest, to model the x1 contribution, some splits are done with x1, some with her brothers. For this reason, if x1 gets broken, the impact is not as big as if x2 breaks. . Lasso selection . On the other hand, lasso kind of makes it (recall that cv.glmnet default is lasso): . # Train lasso lasso &lt;- cv.glmnet(X, y) # Kind of makes it coef(lasso, s = &quot;lambda.min&quot;) . ## 13 x 1 sparse Matrix of class &quot;dgCMatrix&quot; ## 1 ## (Intercept) 0.01334871 ## x1 0.90829549 ## x2 0.49467345 ## x3 0.49902516 ## x4 0.48559226 ## x11 0.01570838 ## x12 . ## x13 . ## x14 . ## x15 . ## x16 0.02241166 ## x17 0.06331782 ## x18 . . It selects some of the x1 brothers, but with really small coefficients. If we regularize a bit more, they’ll probably vanish. . In fact, the next figure shows that the last feature to be vanished is x1, which didn’t happen in the random forest: . # x1 is the last one to go plotmo::plot_glmnet(lasso$glmnet.fit) . . Of course Lasso selects the variables better in this case, as the model is generated linearly. A case where feature importance might shine more than the Lasso is when the dependent variable is a non-linear function of the features. . To sum up, be careful with feature importance when having highly correlated features. .",
            "url": "https://david26694.github.io/david-masip-blog/r/feature-selection/2020/05/16/feature-selection-part-2.html",
            "relUrl": "/r/feature-selection/2020/05/16/feature-selection-part-2.html",
            "date": " • May 16, 2020"
        }
        
    
  
    
        ,"post8": {
            "title": "Feature selection part 1",
            "content": "The purpose of this post is to show the weaknesses of univariate feature selection methods. This methods usually go in the following way: . Compute a correlation metric for every feature with the target (this metric might be correlation or mutual information, among others) | Select the features that score the best regarding this metric | . A possible implementation is SelectKBest in sklearn. . If you’re an univariate method lover and have a different perspective, don’t hesitate to contact me. . Experiment set-up . Let’s prepare an experiment to see the deficiencies of these methods. We generate two variables x1 and x2 and a target variable y that is x1 + 0.1 * x2 + noise. So, the variable y is very similar to x1, but has some x2 as well. Then we create two variables x1a and x2a, that are noisy versions of x1 and x2. . Although the data is artifical, I believe this occurs in real life. When performing feature engineering, we might end up with pretty good features that are correlated, and also have not so good features. . library(dplyr) library(glmnet) library(yardstick) set.seed(42) len &lt;- 20000 x1 &lt;- rnorm(len) x2 &lt;- rnorm(len) # All the rnorm(len) that appear from now on are to simulate noise y &lt;- x1 + 0.1 * x2 + 0.05 * rnorm(len) x1a &lt;- 0.8 * x1 + 0.2 * rnorm(len) x2a &lt;- 0.8 * x2 + 0.2 * rnorm(len) . After this, we split the data in train and test sets to estimate errors. We also transform the data to matrix representation, as we’re going to use glmnet package that uses matrices to fit models. . model_tbl &lt;- tibble( y = y, x1 = x1, x2 = x2, x1a = x1a, x2a = x2a ) # Split train and test - X &lt;- as.matrix(select(model_tbl, -y)) X_train &lt;- X[1:(len/2),] y_train &lt;- y[1:(len/2)] X_test &lt;- X[(len/2 + 1):len,] y_test &lt;- y[(len/2 + 1):len] . Univariate-method approach . The univariate method approach that we follow here consists in keeping the most correlated variables with the target. For this reason, we compute the correlation for each variable: . cor(X_train, y_train) . ## [,1] ## x1 0.99390574 ## x2 0.10012730 ## x1a 0.96482998 ## x2a 0.09786507 . We’ll keep only the first and third variables, as they are the most correlated with the target. We’ll train a ridge model using glmnet and cross-validation to select the optimal hyperparameters: . X_train_cor &lt;- X_train[, c(1, 3)] X_test_cor &lt;- X_test[, c(1, 3)] ridge &lt;- cv.glmnet(X_train_cor, y_train, alpha = 0) y_pred_cor &lt;- as.vector(predict(ridge, X_test_cor, s = &quot;lambda.min&quot;)) . Multivariate methods: the Lasso . The Lasso can be thought of as a multivariate feature selection method, as it uses all the features at the same time to select a subset. Here we are applying a Lasso because cv.glmnet does Lasso (alpha = 1) by default. . lasso &lt;- cv.glmnet(X_train, y_train) y_pred_lasso &lt;- as.vector(predict(lasso, X_test, s = &quot;lambda.min&quot;)) . Results . Coefficient comparison . By construction, the coefficients should be 1 for x1 and 0.1 for x2. In the ridge case (recall that we’ve applied univariate selection using correlation), this won’t happen as we’ve deleted x2 because the correlation with the target was too low. . coef(ridge, s = &quot;lambda.min&quot;) . ## 3 x 1 sparse Matrix of class &quot;dgCMatrix&quot; ## 1 ## (Intercept) -0.000664586 ## x1 0.589067554 ## x1a 0.439495206 . In fact, what we have is a mixture of x1 and x1a. . On the other hand, the Lasso sets the coefficients of x1a and x2a to 0 (doesn’t select those variables), and estimates the coefficents of x1 and x2 pretty well: . coef(lasso, s = &quot;lambda.min&quot;) . ## 5 x 1 sparse Matrix of class &quot;dgCMatrix&quot; ## 1 ## (Intercept) -0.0004744455 ## x1 0.9954934728 ## x2 0.0941690869 ## x1a . ## x2a . . Test set results . If you care more about model performance and not that much of proper estimation of the parameters, I also have an argument for you. The Lasso predictions are way better than the correlation method predictions: . rmse_vec(y_pred_lasso, y_test) . ## [1] 0.05027135 . rmse_vec(y_pred_cor, y_test) . ## [1] 0.1563891 . We can even interpret it: . The lasso error is around 0.05 which is the “noise size” used to generate y. | The error of the univariate method is 0.15, which is 0.05 (noise size used to generate y) plus 0.10 (error we are commiting by not considering x2). | .",
            "url": "https://david26694.github.io/david-masip-blog/r/feature-selection/2020/05/09/feature-selection-part-1.html",
            "relUrl": "/r/feature-selection/2020/05/09/feature-selection-part-1.html",
            "date": " • May 9, 2020"
        }
        
    
  
    
        ,"post9": {
            "title": "The Art of Readable Code",
            "content": "Some time ago I read The art of Readable Code. I recommend this read for every person starting a career where they have to code on a daily basis. Here’s a summary of the ideas I liked the most. . Better code . 1. Code should by easy to understand . Key ideas: Code should be easy to understand. | Code should be written to minimize the time it would take for someone else to understand it. | Smaller isn’t always better. | . | . I think defining a metric and push your efforts to improve it simplifies your life. In this case, the metric is the time that it would take for someone to understand your code. . 2. Packing information into names . Pack information into names. | Choose specific words: get is not very specific. | Avoid generic names like tmp, aux, retval. | Variable names are tiny comments. | Abbreviations: would a new teammate understand what the name means? | Summary: Use specific words. | Avoid generic names. | Attach important details. | Use capitalization, underscores and so on in a meaningful way. | . | . This chapter allowed me to give more meaningful names to variables and functions. When I define a function called get_data or a variable called data there’s something in my head telling me I should improve it. I never call a variable var anymore. . 3. Names that can’t be misconstructed . Actively scrutinize names by asking: what other meanings can be interpreted? | Summary: Play devil’s advocate with names. | When naming booleans, use words like is to make it clear. | . | . I like the idea of putting yourself into a new teammate position and see how could they fuck up due to your bad naming. . 4. Aesthetics . Use consistent layout, with patterns the reader can get used to. | Make similar code look similar. | Group related lines of code into blocks. | Aligning parts of the code into “columns” can make code easy to skim through. | If code mentions A, B, and C in one place, don’t say B, C, and A in another. Pick a meaningful order and stick with it. | Use empty lines to break apart large blocks into logical “paragraphs.” | . More aestethic code is easier to read. . 5. Knowing what to comment . The purpose of commenting is to help the reader know as much as the writer did. | Don’t comment just for the sake of commenting. | Don’t comment bad names. Fix the names instead. | Include director comments to understand the general idea. Imagine someone joins the team, what would you explain to her? These things have to be commented. | Comment your constants. | Put in the reader’s shoes. | Advertise likely pitfalls: what is surprising about the code? how it might by misused? | Summarise blocks of code so the reader doesn’t get lost in details. | . I used to write comments just to write comments. If a function is called: . get_client_ids . Please don’t add the comment . # This function gets the clients ids . 6. Making comments precise and compact . Comments should have high info-to-space ratio | Illustrate comments with carefully chosen input/output examples. | Add high-level idea of code instead of obvious details. | . Providing examples is key if you want someone to use your code. I think R does this pretty well for package developers. . Simplifying loops and logic . 7. Simplifying loops and logic . Key idea: make control flow as natural as possible. | Prefered orders in if(a == b) vs if(a != b): Prefer positive case first. | Prefer simpler case first. | Prefer more interesting case first (there can be conflicts with the above). | . | Return early from functions if possible. | Minimize nesting. | . I think it’s easier to reason about positive cases than negative (negating adds a complexity layer). . 8. Breaking down giant expressions . Key idea: break down giant expressions into more digestible pieces. | Explaining variables: use extra variables that capture subexpressions. | Beware of “clever” chunks of code: they’re often harder to read. | . This is something we’ve all been told. Split your code into functions, etc. I particularly like the warning about clever chunks of code. If you need to think very hard to code it, it’s probably going to be hard to understand. . 9. Variables and readability . Sloppy use of variables issues: The more variables, the harder to keep track of them: Eliminate variables that jut get in the way. | The bigger a variable scope, the longer you have to keep track: Make your variable visible by as few lines of code as possible. | The more often it changes, the harder it is to keep track of its value: Prefer write-once variables. | . | . I particularly like the fact that variables shouldn’t be updated a lot and that they should be in the shortest subset of code possible. . Reorganizing your code . 10. Extracting unrelated subproblems . Method to extract unrelated subproblems: For each function/block, obtain the high-level goal of the code. | For each line of code, ask if it solves the high-level goal or an unrelated subproblem. | If enough lines solve an unrelated subproblem, extract the code in a separate function. | . | Create general-purpose code: separate generic code from project-specific code. | . 11. One task at a time . Key idea: Code should be organized so that it’s doing only one task at a time. | List all tasks code is doing. Some of them might easily become functions or classes. Others become paragraphs in a funciton. | . 12. Turning thoughts into code . Process that can help you code clearly: Describe code as you would to a colleague. | Pay attention to key words. | Write code to match description. | . | The method is also valid for debugging (as describing the problem). | . 13. Writing less code . Eliminate nonessential features from product. | Rethink requirements to solve the easiest version of the problem that still gets the job done. | Stay familiar with standard libraries by reading their APIs. | .",
            "url": "https://david26694.github.io/david-masip-blog/code/2020/05/02/art-of-readable-code.html",
            "relUrl": "/code/2020/05/02/art-of-readable-code.html",
            "date": " • May 2, 2020"
        }
        
    
  

  
  

  
      ,"page1": {
          "title": "About Me",
          "content": "I’m David Masip, mathematician and physicist from Tarragona. . Currently working as a Data Scientist in Barcelona. . I plan to write about Machine Learning, and some Software Development and Mathematics. .",
          "url": "https://david26694.github.io/david-masip-blog/about/",
          "relUrl": "/about/",
          "date": ""
      }
      
  

  

  
  

  

  
  

  

  
  

  
  

  
  

  
      ,"page10": {
          "title": "",
          "content": "Sitemap: {{ “sitemap.xml” | absolute_url }} | .",
          "url": "https://david26694.github.io/david-masip-blog/robots.txt",
          "relUrl": "/robots.txt",
          "date": ""
      }
      
  

}